// Generated by dart2js, the Dart to JavaScript compiler version: 1.3.0-dev.5.2.
// The code supports the following hooks:
// dartPrint(message):
//    if this function is defined it is called instead of the Dart [print]
//    method.
//
// dartMainRunner(main, args):
//    if this function is defined, the Dart [main] method will not be invoked
//    directly. Instead, a closure that will invoke [main], and its arguments
//    [args] is passed to [dartMainRunner].
(function($) {
function dart(){ this.x = 0 }var A = new dart;
delete A.x;
var B = new dart;
delete B.x;
var C = new dart;
delete C.x;
var D = new dart;
delete D.x;
var E = new dart;
delete E.x;
var F = new dart;
delete F.x;
var G = new dart;
delete G.x;
var H = new dart;
delete H.x;
var J = new dart;
delete J.x;
var K = new dart;
delete K.x;
var L = new dart;
delete L.x;
var M = new dart;
delete M.x;
var N = new dart;
delete N.x;
var O = new dart;
delete O.x;
var P = new dart;
delete P.x;
var Q = new dart;
delete Q.x;
var R = new dart;
delete R.x;
var S = new dart;
delete S.x;
var T = new dart;
delete T.x;
var U = new dart;
delete U.x;
var V = new dart;
delete V.x;
var W = new dart;
delete W.x;
var X = new dart;
delete X.x;
var Y = new dart;
delete Y.x;
var Z = new dart;
delete Z.x;
function Isolate() {}
init();

$ = Isolate.$isolateProperties;
var $$ = {};

(function (reflectionData) {
  "use strict";
  function map(x){x={x:x};delete x.x;return x}
    function processStatics(descriptor) {
      for (var property in descriptor) {
        if (!hasOwnProperty.call(descriptor, property)) continue;
        if (property === "^") continue;
        var element = descriptor[property];
        var firstChar = property.substring(0, 1);
        var previousProperty;
        if (firstChar === "+") {
          mangledGlobalNames[previousProperty] = property.substring(1);
          var flag = descriptor[property];
          if (flag > 0) descriptor[previousProperty].$reflectable = flag;
          if (element && element.length) init.typeInformation[previousProperty] = element;
        } else if (firstChar === "@") {
          property = property.substring(1);
          $[property]["@"] = element;
        } else if (firstChar === "*") {
          globalObject[previousProperty].$defaultValues = element;
          var optionalMethods = descriptor.$methodsWithOptionalArguments;
          if (!optionalMethods) {
            descriptor.$methodsWithOptionalArguments = optionalMethods = {}
          }
          optionalMethods[property] = previousProperty;
        } else if (typeof element === "function") {
          globalObject[previousProperty = property] = element;
          functions.push(property);
          init.globalFunctions[property] = element;
        } else if (element.constructor === Array) {
          addStubs(globalObject, element, property, true, descriptor, functions);
        } else {
          previousProperty = property;
          var newDesc = {};
          var previousProp;
          for (var prop in element) {
            if (!hasOwnProperty.call(element, prop)) continue;
            firstChar = prop.substring(0, 1);
            if (prop === "static") {
              processStatics(init.statics[property] = element[prop]);
            } else if (firstChar === "+") {
              mangledNames[previousProp] = prop.substring(1);
              var flag = element[prop];
              if (flag > 0) element[previousProp].$reflectable = flag;
            } else if (firstChar === "@" && prop !== "@") {
              newDesc[prop.substring(1)]["@"] = element[prop];
            } else if (firstChar === "*") {
              newDesc[previousProp].$defaultValues = element[prop];
              var optionalMethods = newDesc.$methodsWithOptionalArguments;
              if (!optionalMethods) {
                newDesc.$methodsWithOptionalArguments = optionalMethods={}
              }
              optionalMethods[prop] = previousProp;
            } else {
              var elem = element[prop];
              if (prop !== "^" && elem != null && elem.constructor === Array && prop !== "<>") {
                addStubs(newDesc, elem, prop, false, element, []);
              } else {
                newDesc[previousProp = prop] = elem;
              }
            }
          }
          $$[property] = [globalObject, newDesc];
          classes.push(property);
        }
      }
    }
  function addStubs(descriptor, array, name, isStatic, originalDescriptor, functions) {
    var f, funcs = [originalDescriptor[name] = descriptor[name] = f = array[0]];
    f.$stubName = name;
    functions.push(name);
    for (var index = 0; index < array.length; index += 2) {
      f = array[index + 1];
      if (typeof f != "function") break;
      f.$stubName = array[index + 2];
      funcs.push(f);
      if (f.$stubName) {
        originalDescriptor[f.$stubName] = descriptor[f.$stubName] = f;
        functions.push(f.$stubName);
      }
    }
    for (var i = 0; i < funcs.length; index++, i++) {
      funcs[i].$callName = array[index + 1];
    }
    var getterStubName = array[++index];
    array = array.slice(++index);
    var requiredParameterInfo = array[0];
    var requiredParameterCount = requiredParameterInfo >> 1;
    var isAccessor = (requiredParameterInfo & 1) === 1;
    var isSetter = requiredParameterInfo === 3;
    var isGetter = requiredParameterInfo === 1;
    var optionalParameterInfo = array[1];
    var optionalParameterCount = optionalParameterInfo >> 1;
    var optionalParametersAreNamed = (optionalParameterInfo & 1) === 1;
    var isIntercepted = requiredParameterCount + optionalParameterCount != funcs[0].length;
    var functionTypeIndex = array[2];
    var isReflectable = array.length > 3 * optionalParameterCount + 2 * requiredParameterCount + 3
    if (getterStubName) {
      f = tearOff(funcs, array, isStatic, name, isIntercepted);
      if (isStatic) init.globalFunctions[name] = f;
      originalDescriptor[getterStubName] = descriptor[getterStubName] = f;
      funcs.push(f);
      if (getterStubName) functions.push(getterStubName);
      f.$stubName = getterStubName;
      f.$callName = null;
    }
    if (isReflectable) {
      for (var i = 0; i < funcs.length; i++) {
        funcs[i].$reflectable = 1;
        funcs[i].$reflectionInfo = array;
      }
    }
    if (isReflectable) {
      var unmangledNameIndex = 3 * optionalParameterCount + 2 * requiredParameterCount + 3;
      var unmangledName = array[unmangledNameIndex];
      var reflectionName = unmangledName + ":" + requiredParameterCount + ":" + optionalParameterCount;
      if (isGetter) {
        reflectionName = unmangledName;
      } else if (isSetter) {
        reflectionName = unmangledName + "=";
      }
      if (isStatic) {
        init.mangledGlobalNames[name] = reflectionName;
      } else {
        init.mangledNames[name] = reflectionName;
      }
      funcs[0].$reflectionName = reflectionName;
      funcs[0].$metadataIndex = unmangledNameIndex + 1;
      if (optionalParameterCount) descriptor[unmangledName + "*"] = funcs[0];
    }
  }
  function tearOffGetterNoCsp(funcs, reflectionInfo, name, isIntercepted) {
    return isIntercepted
        ? new Function("funcs", "reflectionInfo", "name", "H", "c",
            "return function tearOff_" + name + (functionCounter++)+ "(x) {" +
              "if (c === null) c = H.closureFromTearOff(" +
                  "this, funcs, reflectionInfo, false, [x], name);" +
              "return new c(this, funcs[0], x, name);" +
            "}")(funcs, reflectionInfo, name, H, null)
        : new Function("funcs", "reflectionInfo", "name", "H", "c",
            "return function tearOff_" + name + (functionCounter++)+ "() {" +
              "if (c === null) c = H.closureFromTearOff(" +
                  "this, funcs, reflectionInfo, false, [], name);" +
              "return new c(this, funcs[0], null, name);" +
            "}")(funcs, reflectionInfo, name, H, null)
  }
  function tearOffGetterCsp(funcs, reflectionInfo, name, isIntercepted) {
    var cache = null;
    return isIntercepted
        ? function(x) {
            if (cache === null) cache = H.closureFromTearOff(this, funcs, reflectionInfo, false, [x], name);
            return new cache(this, funcs[0], x, name)
          }
        : function() {
            if (cache === null) cache = H.closureFromTearOff(this, funcs, reflectionInfo, false, [], name);
            return new cache(this, funcs[0], null, name)
          }
  }
  function tearOff(funcs, reflectionInfo, isStatic, name, isIntercepted) {
    var cache;
    return isStatic
        ? function() {
            if (cache === void 0) cache = H.closureFromTearOff(this, funcs, reflectionInfo, true, [], name).prototype;
            return cache;
          }
        : tearOffGetter(funcs, reflectionInfo, name, isIntercepted);
  }
  var functionCounter = 0;
  var tearOffGetter = (typeof dart_precompiled == "function")
      ? tearOffGetterCsp : tearOffGetterNoCsp;
  if (!init.libraries) init.libraries = [];
  if (!init.mangledNames) init.mangledNames = map();
  if (!init.mangledGlobalNames) init.mangledGlobalNames = map();
  if (!init.statics) init.statics = map();
  if (!init.typeInformation) init.typeInformation = map();
  if (!init.globalFunctions) init.globalFunctions = map();
  var libraries = init.libraries;
  var mangledNames = init.mangledNames;
  var mangledGlobalNames = init.mangledGlobalNames;
  var hasOwnProperty = Object.prototype.hasOwnProperty;
  var length = reflectionData.length;
  for (var i = 0; i < length; i++) {
    var data = reflectionData[i];
    var name = data[0];
    var uri = data[1];
    var metadata = data[2];
    var globalObject = data[3];
    var descriptor = data[4];
    var isRoot = !!data[5];
    var fields = descriptor && descriptor["^"];
    var classes = [];
    var functions = [];
    processStatics(descriptor);
    libraries.push([name, uri, classes, functions, metadata, fields, isRoot,
                    globalObject]);
  }
})
([
["_foreign_helper", "dart:_foreign_helper", , H, {
  "^": "",
  JS_CONST: {
    "^": "Object;code"
  }
}],
["_interceptors", "dart:_interceptors", , J, {
  "^": "",
  getInterceptor: function(object) {
    return void 0;
  },
  Interceptor: {
    "^": "Object;",
    $eq: function(receiver, other) {
      return receiver === other;
    },
    get$hashCode: function(receiver) {
      return H.Primitives_objectHashCode(receiver);
    },
    toString$0: function(receiver) {
      return H.Primitives_objectToString(receiver);
    }
  },
  JSBool: {
    "^": "bool/Interceptor;",
    toString$0: function(receiver) {
      return String(receiver);
    },
    get$hashCode: function(receiver) {
      return receiver ? 519018 : 218159;
    }
  },
  JSNull: {
    "^": "Null/Interceptor;",
    $eq: function(receiver, other) {
      return null == other;
    },
    toString$0: function(receiver) {
      return "null";
    },
    get$hashCode: function(receiver) {
      return 0;
    }
  },
  JSArray0: {
    "^": "List/Interceptor;",
    forEach$1: function(receiver, f) {
      return H.IterableMixinWorkaround_forEach(receiver, f);
    },
    toString$0: function(receiver) {
      return H.IterableMixinWorkaround_toStringIterable(receiver, "[", "]");
    },
    get$hashCode: function(receiver) {
      return H.Primitives_objectHashCode(receiver);
    },
    get$length: function(receiver) {
      return receiver.length;
    },
    set$length: function(receiver, newLength) {
      if (typeof newLength !== "number" || Math.floor(newLength) !== newLength)
        throw H.wrapException(P.ArgumentError$(newLength));
      if (newLength < 0)
        throw H.wrapException(P.RangeError$value(newLength));
      if (!!receiver.fixed$length)
        H.throwExpression(P.UnsupportedError$("set length"));
      receiver.length = newLength;
    },
    $isList: true
  },
  JSNumber: {
    "^": "num/Interceptor;",
    get$isNegative: function(receiver) {
      return receiver === 0 ? 1 / receiver < 0 : receiver < 0;
    },
    abs$0: function(receiver) {
      return Math.abs(receiver);
    },
    toInt$0: function(receiver) {
      var t1;
      if (receiver >= -2147483648 && receiver <= 2147483647)
        return receiver | 0;
      if (isFinite(receiver)) {
        t1 = receiver < 0 ? Math.ceil(receiver) : Math.floor(receiver);
        return t1 + 0;
      }
      throw H.wrapException(P.UnsupportedError$('' + receiver));
    },
    floor$0: function(receiver) {
      return this.toInt$0(Math.floor(receiver));
    },
    toRadixString$1: function(receiver, radix) {
      if (typeof radix !== "number")
        H.throwExpression(P.ArgumentError$(radix));
      if (typeof radix !== "number")
        return radix.$lt();
      if (radix < 2 || radix > 36)
        throw H.wrapException(P.RangeError$(radix));
      return receiver.toString(radix);
    },
    toString$0: function(receiver) {
      if (receiver === 0 && 1 / receiver < 0)
        return "-0.0";
      else
        return "" + receiver;
    },
    get$hashCode: function(receiver) {
      return receiver & 0x1FFFFFFF;
    },
    $negate: function(receiver) {
      return -receiver;
    },
    $add: function(receiver, other) {
      if (typeof other !== "number")
        throw H.wrapException(P.ArgumentError$(other));
      return receiver + other;
    },
    $sub: function(receiver, other) {
      if (typeof other !== "number")
        throw H.wrapException(P.ArgumentError$(other));
      return receiver - other;
    },
    $mul: function(receiver, other) {
      if (typeof other !== "number")
        throw H.wrapException(P.ArgumentError$(other));
      return receiver * other;
    },
    $mod: function(receiver, other) {
      var result;
      if (typeof other !== "number")
        throw H.wrapException(P.ArgumentError$(other));
      result = receiver % other;
      if (result === 0)
        return 0;
      if (result > 0)
        return result;
      if (other < 0)
        return result - other;
      else
        return result + other;
    },
    $tdiv: function(receiver, other) {
      if ((receiver | 0) === receiver && (other | 0) === other && 0 !== other && -1 !== other)
        return receiver / other | 0;
      else {
        if (typeof other !== "number")
          H.throwExpression(P.ArgumentError$(other));
        return this.toInt$0(receiver / other);
      }
    },
    $shl: function(receiver, other) {
      if (typeof other !== "number")
        throw H.wrapException(P.ArgumentError$(other));
      if (other < 0)
        throw H.wrapException(P.ArgumentError$(other));
      return other > 31 ? 0 : receiver << other >>> 0;
    },
    $shr: function(receiver, other) {
      var t1;
      if (typeof other !== "number")
        throw H.wrapException(P.ArgumentError$(other));
      if (other < 0)
        throw H.wrapException(P.ArgumentError$(other));
      if (receiver > 0)
        t1 = other > 31 ? 0 : receiver >>> other;
      else {
        t1 = other > 31 ? 31 : other;
        t1 = receiver >> t1 >>> 0;
      }
      return t1;
    },
    _shrOtherPositive$1: function(receiver, other) {
      var t1;
      if (receiver > 0)
        t1 = other > 31 ? 0 : receiver >>> other;
      else {
        t1 = other > 31 ? 31 : other;
        t1 = receiver >> t1 >>> 0;
      }
      return t1;
    },
    $and: function(receiver, other) {
      if (typeof other !== "number")
        throw H.wrapException(P.ArgumentError$(other));
      return (receiver & other) >>> 0;
    },
    $or: function(receiver, other) {
      if (typeof other !== "number")
        throw H.wrapException(P.ArgumentError$(other));
      return (receiver | other) >>> 0;
    },
    $lt: function(receiver, other) {
      if (typeof other !== "number")
        throw H.wrapException(P.ArgumentError$(other));
      return receiver < other;
    },
    $gt: function(receiver, other) {
      if (typeof other !== "number")
        throw H.wrapException(P.ArgumentError$(other));
      return receiver > other;
    },
    $le: function(receiver, other) {
      if (typeof other !== "number")
        throw H.wrapException(P.ArgumentError$(other));
      return receiver <= other;
    },
    $ge: function(receiver, other) {
      if (typeof other !== "number")
        throw H.wrapException(P.ArgumentError$(other));
      return receiver >= other;
    },
    $isnum: true,
    static: {"^": "JSNumber__MIN_INT32,JSNumber__MAX_INT32"}
  },
  JSInt: {
    "^": "int/JSNumber;",
    $isdouble: true,
    $isnum: true,
    $isint: true
  },
  JSDouble: {
    "^": "double/JSNumber;",
    $isdouble: true,
    $isnum: true
  },
  JSString: {
    "^": "String/Interceptor;",
    codeUnitAt$1: function(receiver, index) {
      if (index < 0)
        throw H.wrapException(P.RangeError$value(index));
      if (index >= receiver.length)
        throw H.wrapException(P.RangeError$value(index));
      return receiver.charCodeAt(index);
    },
    $add: function(receiver, other) {
      if (typeof other !== "string")
        throw H.wrapException(P.ArgumentError$(other));
      return receiver + other;
    },
    substring$2: function(receiver, startIndex, endIndex) {
      if (endIndex == null)
        endIndex = receiver.length;
      if (typeof endIndex !== "number" || Math.floor(endIndex) !== endIndex)
        H.throwExpression(P.ArgumentError$(endIndex));
      if (startIndex < 0)
        throw H.wrapException(P.RangeError$value(startIndex));
      if (typeof endIndex !== "number")
        return H.iae(endIndex);
      if (startIndex > endIndex)
        throw H.wrapException(P.RangeError$value(startIndex));
      if (endIndex > receiver.length)
        throw H.wrapException(P.RangeError$value(endIndex));
      return receiver.substring(startIndex, endIndex);
    },
    substring$1: function($receiver, startIndex) {
      return this.substring$2($receiver, startIndex, null);
    },
    $mul: function(receiver, times) {
      var s, result;
      if (0 >= times)
        return "";
      if (times === 1 || receiver.length === 0)
        return receiver;
      if (times !== times >>> 0)
        throw H.wrapException(C.C_OutOfMemoryError);
      for (s = receiver, result = ""; true;) {
        if ((times & 1) === 1)
          result = s + result;
        times = times >>> 1;
        if (times === 0)
          break;
        s += s;
      }
      return result;
    },
    toString$0: function(receiver) {
      return receiver;
    },
    get$hashCode: function(receiver) {
      var t1, hash, i;
      for (t1 = receiver.length, hash = 0, i = 0; i < t1; ++i) {
        hash = 536870911 & hash + receiver.charCodeAt(i);
        hash = 536870911 & hash + ((524287 & hash) << 10 >>> 0);
        hash ^= hash >> 6;
      }
      hash = 536870911 & hash + ((67108863 & hash) << 3 >>> 0);
      hash ^= hash >> 11;
      return 536870911 & hash + ((16383 & hash) << 15 >>> 0);
    },
    get$length: function(receiver) {
      return receiver.length;
    },
    $isString: true
  }
}],
["_js_helper", "dart:_js_helper", , H, {
  "^": "",
  S: function(value) {
    var res;
    if (typeof value === "string")
      return value;
    if (typeof value === "number") {
      if (value !== 0)
        return "" + value;
    } else if (true === value)
      return "true";
    else if (false === value)
      return "false";
    else if (value == null)
      return "null";
    res = J.toString$0(value);
    if (typeof res !== "string")
      throw H.wrapException(P.ArgumentError$(value));
    return res;
  },
  Primitives_objectHashCode: function(object) {
    var hash = object.$identityHash;
    if (hash == null) {
      hash = Math.random() * 0x3fffffff | 0;
      object.$identityHash = hash;
    }
    return hash;
  },
  Primitives_objectTypeName: function(object) {
    var $name, decompiled;
    $name = C.JS_CONST_IX5(J.getInterceptor(object));
    if ($name === "Object") {
      decompiled = String(object.constructor).match(/^\s*function\s*(\S*)\s*\(/)[1];
      if (typeof decompiled === "string")
        $name = decompiled;
    }
    if (J.getInterceptor$s($name).codeUnitAt$1($name, 0) === 36)
      $name = C.JSString_methods.substring$1($name, 1);
    return $name + H.joinArguments(H.getRuntimeTypeInfo(object), 0, null);
  },
  Primitives_objectToString: function(object) {
    return "Instance of '" + H.Primitives_objectTypeName(object) + "'";
  },
  iae: function(argument) {
    throw H.wrapException(P.ArgumentError$(argument));
  },
  ioore: function(receiver, index) {
    if (receiver == null)
      J.get$length$as(receiver);
    if (typeof index !== "number" || Math.floor(index) !== index)
      H.iae(index);
    throw H.wrapException(P.RangeError$value(index));
  },
  wrapException: function(ex) {
    var wrapper;
    if (ex == null)
      ex = new P.NullThrownError();
    wrapper = new Error();
    wrapper.dartException = ex;
    if ("defineProperty" in Object) {
      Object.defineProperty(wrapper, "message", { get: H.toStringWrapper });
      wrapper.name = "";
    } else
      wrapper.toString = H.toStringWrapper;
    return wrapper;
  },
  toStringWrapper: function() {
    return J.toString$0(this.dartException);
  },
  throwExpression: function(ex) {
    var wrapper;
    if (ex == null)
      ex = new P.NullThrownError();
    wrapper = new Error();
    wrapper.dartException = ex;
    if ("defineProperty" in Object) {
      Object.defineProperty(wrapper, "message", { get: H.toStringWrapper });
      wrapper.name = "";
    } else
      wrapper.toString = H.toStringWrapper;
    throw wrapper;
  },
  objectHashCode: function(object) {
    if (object == null || typeof object != 'object')
      return J.get$hashCode$(object);
    else
      return H.Primitives_objectHashCode(object);
  },
  Closure_fromTearOff: function(receiver, functions, reflectionInfo, isStatic, jsArguments, propertyName) {
    var $function, callName, functionType, $prototype, $constructor, t1, isIntercepted, trampoline, signatureFunction, getReceiver, i, stub, stubCallName, t2;
    $function = functions[0];
    $function.$stubName;
    callName = $function.$callName;
    $function.$reflectionInfo = reflectionInfo;
    functionType = H.ReflectionInfo_ReflectionInfo($function).functionType;
    $prototype = isStatic ? Object.create(new H.TearOffClosure().constructor.prototype) : Object.create(new H.BoundClosure(null, null, null, null).constructor.prototype);
    $prototype.$initialize = $prototype.constructor;
    if (isStatic)
      $constructor = function(){this.$initialize()};
    else if (typeof dart_precompiled == "function") {
      t1 = function(a,b,c,d) {this.$initialize(a,b,c,d)};
      $constructor = t1;
    } else {
      t1 = $.Closure_functionCounter;
      $.Closure_functionCounter = J.$add$ns(t1, 1);
      t1 = new Function("a", "b", "c", "d", "this.$initialize(a,b,c,d);" + t1);
      $constructor = t1;
    }
    $prototype.constructor = $constructor;
    $constructor.prototype = $prototype;
    t1 = !isStatic;
    if (t1) {
      isIntercepted = jsArguments.length == 1 && true;
      trampoline = H.Closure_forwardCallTo($function, isIntercepted);
    } else {
      $prototype.$name = propertyName;
      trampoline = $function;
      isIntercepted = false;
    }
    if (typeof functionType == "number")
      signatureFunction = (function(s){return function(){return init.metadata[s]}})(functionType);
    else if (t1 && typeof functionType == "function") {
      getReceiver = isIntercepted ? H.BoundClosure_receiverOf : H.BoundClosure_selfOf;
      signatureFunction = function(f,r){return function(){return f.apply({$receiver:r(this)},arguments)}}(functionType,getReceiver);
    } else
      throw H.wrapException("Error in reflectionInfo.");
    $prototype.$signature = signatureFunction;
    $prototype[callName] = trampoline;
    for (t1 = functions.length, i = 1; i < t1; ++i) {
      stub = functions[i];
      stubCallName = stub.$callName;
      if (stubCallName != null) {
        t2 = isStatic ? stub : H.Closure_forwardCallTo(stub, isIntercepted);
        $prototype[stubCallName] = t2;
      }
    }
    $prototype["call*"] = $function;
    return $constructor;
  },
  Closure_cspForwardCall: function(arity, $function) {
    var getSelf = H.BoundClosure_selfOf;
    switch (arity) {
      case 0:
        return function(F,S){return function(){return F.call(S(this))}}($function,getSelf);
      case 1:
        return function(F,S){return function(a){return F.call(S(this),a)}}($function,getSelf);
      case 2:
        return function(F,S){return function(a,b){return F.call(S(this),a,b)}}($function,getSelf);
      case 3:
        return function(F,S){return function(a,b,c){return F.call(S(this),a,b,c)}}($function,getSelf);
      case 4:
        return function(F,S){return function(a,b,c,d){return F.call(S(this),a,b,c,d)}}($function,getSelf);
      case 5:
        return function(F,S){return function(a,b,c,d,e){return F.call(S(this),a,b,c,d,e)}}($function,getSelf);
      default:
        return function(f,s){return function(){return f.apply(s(this),arguments)}}($function,getSelf);
    }
  },
  Closure_forwardCallTo: function($function, isIntercepted) {
    var arity, t1, t2, $arguments;
    if (isIntercepted)
      return H.Closure_forwardInterceptedCallTo($function);
    arity = $function.length;
    if (typeof dart_precompiled == "function")
      return H.Closure_cspForwardCall(arity, $function);
    else if (arity === 0) {
      t1 = $.BoundClosure_selfFieldNameCache;
      if (t1 == null) {
        t1 = H.BoundClosure_computeFieldNamed("self");
        $.BoundClosure_selfFieldNameCache = t1;
      }
      t1 = "return function(){return F.call(this." + H.S(t1) + ");";
      t2 = $.Closure_functionCounter;
      $.Closure_functionCounter = J.$add$ns(t2, 1);
      return new Function("F", t1 + H.S(t2) + "}")($function);
    } else if (1 <= arity && arity < 27) {
      $arguments = "abcdefghijklmnopqrstuvwxyz".split("").splice(0, arity).join(",");
      t1 = "return function(" + $arguments + "){return F.call(this.";
      t2 = $.BoundClosure_selfFieldNameCache;
      if (t2 == null) {
        t2 = H.BoundClosure_computeFieldNamed("self");
        $.BoundClosure_selfFieldNameCache = t2;
      }
      t2 = t1 + H.S(t2) + "," + $arguments + ");";
      t1 = $.Closure_functionCounter;
      $.Closure_functionCounter = J.$add$ns(t1, 1);
      return new Function("F", t2 + H.S(t1) + "}")($function);
    } else
      return H.Closure_cspForwardCall(arity, $function);
  },
  Closure_cspForwardInterceptedCall: function(arity, $name, $function) {
    var getSelf, getReceiver;
    getSelf = H.BoundClosure_selfOf;
    getReceiver = H.BoundClosure_receiverOf;
    switch (arity) {
      case 0:
        throw H.wrapException(H.RuntimeError$("Intercepted function with no arguments."));
      case 1:
        return function(f,s,r){return function(){return f.call(s(this),r(this))}}($function,getSelf,getReceiver);
      case 2:
        return function(f,s,r){return function(a){return f.call(s(this),r(this),a)}}($function,getSelf,getReceiver);
      case 3:
        return function(f,s,r){return function(a,b){return f.call(s(this),r(this),a,b)}}($function,getSelf,getReceiver);
      case 4:
        return function(f,s,r){return function(a,b,c){return f.call(s(this),r(this),a,b,c)}}($function,getSelf,getReceiver);
      case 5:
        return function(f,s,r){return function(a,b,c,d){return f.call(s(this),r(this),a,b,c,d)}}($function,getSelf,getReceiver);
      case 6:
        return function(f,s,r){return function(a,b,c,d,e){return f.call(s(this),r(this),a,b,c,d,e)}}($function,getSelf,getReceiver);
      default:
        return function(f,s,r,a){return function(){a=[r(this)];Array.prototype.push.apply(a,arguments);return f.apply(s(this),a)}}($function,getSelf,getReceiver);
    }
  },
  Closure_forwardInterceptedCallTo: function($function) {
    var selfField, t1, stubName, arity, t2, $arguments;
    selfField = H.BoundClosure_selfFieldName();
    t1 = $.BoundClosure_receiverFieldNameCache;
    if (t1 == null) {
      t1 = H.BoundClosure_computeFieldNamed("receiver");
      $.BoundClosure_receiverFieldNameCache = t1;
    }
    stubName = $function.$stubName;
    arity = $function.length;
    if (typeof dart_precompiled == "function")
      return H.Closure_cspForwardInterceptedCall(arity, stubName, $function);
    else if (arity === 1) {
      t1 = "return function(){return F.call(this." + H.S(selfField) + ", this." + H.S(t1) + ");";
      t2 = $.Closure_functionCounter;
      $.Closure_functionCounter = J.$add$ns(t2, 1);
      return new Function("F", t1 + H.S(t2) + "}")($function);
    } else if (1 < arity && arity < 28) {
      $arguments = "abcdefghijklmnopqrstuvwxyz".split("").splice(0, arity - 1).join(",");
      t1 = "return function(" + $arguments + "){return F.call(this." + H.S(selfField) + ", this." + H.S(t1) + ", " + $arguments + ");";
      t2 = $.Closure_functionCounter;
      $.Closure_functionCounter = J.$add$ns(t2, 1);
      return new Function("F", t1 + H.S(t2) + "}")($function);
    } else
      return H.Closure_cspForwardInterceptedCall(arity, stubName, $function);
  },
  closureFromTearOff: function(receiver, functions, reflectionInfo, isStatic, jsArguments, $name) {
    functions.fixed$length = init;
    reflectionInfo.fixed$length = init;
    return H.Closure_fromTearOff(receiver, functions, reflectionInfo, !!isStatic, jsArguments, $name);
  },
  throwCyclicInit: function(staticName) {
    throw H.wrapException(P.CyclicInitializationError$("Cyclic initialization for static " + H.S(staticName)));
  },
  setRuntimeTypeInfo: function(target, typeInfo) {
    if (target != null)
      target.$builtinTypeInfo = typeInfo;
    return target;
  },
  getRuntimeTypeInfo: function(target) {
    if (target == null)
      return;
    return target.$builtinTypeInfo;
  },
  runtimeTypeToString: function(type, onTypeVariable) {
    if (type == null)
      return "dynamic";
    else if (typeof type === "object" && type !== null && type.constructor === Array)
      return type[0].builtin$cls + H.joinArguments(type, 1, onTypeVariable);
    else if (typeof type == "function")
      return type.builtin$cls;
    else if (typeof type === "number" && Math.floor(type) === type)
      return C.JSInt_methods.toString$0(type);
    else
      return;
  },
  joinArguments: function(types, startIndex, onTypeVariable) {
    var buffer, index, firstArgument, allDynamic, argument, str;
    if (types == null)
      return "";
    buffer = P.StringBuffer$("");
    for (index = startIndex, firstArgument = true, allDynamic = true; index < types.length; ++index) {
      if (firstArgument)
        firstArgument = false;
      else
        buffer._contents = buffer._contents + ", ";
      argument = types[index];
      if (argument != null)
        allDynamic = false;
      str = H.runtimeTypeToString(argument, onTypeVariable);
      str = typeof str === "string" ? str : H.S(str);
      buffer._contents = buffer._contents + str;
    }
    return allDynamic ? "" : "<" + H.S(buffer) + ">";
  },
  ReflectionInfo: {
    "^": "Object;jsFunction,data,isAccessor,requiredParameterCount,optionalParameterCount,areOptionalParametersNamed,functionType,cachedSortedIndices",
    static: {"^": "ReflectionInfo_REQUIRED_PARAMETERS_INFO,ReflectionInfo_OPTIONAL_PARAMETERS_INFO,ReflectionInfo_FUNCTION_TYPE_INDEX,ReflectionInfo_FIRST_DEFAULT_ARGUMENT", ReflectionInfo_ReflectionInfo: function(jsFunction) {
        var data, requiredParametersInfo, requiredParameterCount, optionalParametersInfo;
        data = jsFunction.$reflectionInfo;
        if (data == null)
          return;
        data.fixed$length = init;
        data = data;
        requiredParametersInfo = data[0];
        requiredParameterCount = requiredParametersInfo >> 1;
        optionalParametersInfo = data[1];
        return new H.ReflectionInfo(jsFunction, data, (requiredParametersInfo & 1) === 1, requiredParameterCount, optionalParametersInfo >> 1, (optionalParametersInfo & 1) === 1, data[2], null);
      }}
  },
  Closure: {
    "^": "Object;",
    toString$0: function(_) {
      return "Closure";
    }
  },
  TearOffClosure: {
    "^": "Closure;"
  },
  BoundClosure: {
    "^": "TearOffClosure;_self,_target,_receiver,_name",
    $eq: function(_, other) {
      if (other == null)
        return false;
      if (this === other)
        return true;
      if (!J.getInterceptor(other).$isBoundClosure)
        return false;
      return this._self === other._self && this._target === other._target && this._receiver === other._receiver;
    },
    get$hashCode: function(_) {
      var t1, receiverHashCode;
      t1 = this._receiver;
      if (t1 == null)
        receiverHashCode = H.Primitives_objectHashCode(this._self);
      else
        receiverHashCode = typeof t1 !== "object" ? J.get$hashCode$(t1) : H.Primitives_objectHashCode(t1);
      return (receiverHashCode ^ H.Primitives_objectHashCode(this._target)) >>> 0;
    },
    $isBoundClosure: true,
    static: {"^": "BoundClosure_selfFieldNameCache,BoundClosure_receiverFieldNameCache", BoundClosure_selfOf: function(closure) {
        return closure._self;
      }, BoundClosure_receiverOf: function(closure) {
        return closure._receiver;
      }, BoundClosure_selfFieldName: function() {
        var t1 = $.BoundClosure_selfFieldNameCache;
        if (t1 == null) {
          t1 = H.BoundClosure_computeFieldNamed("self");
          $.BoundClosure_selfFieldNameCache = t1;
        }
        return t1;
      }, BoundClosure_computeFieldNamed: function(fieldName) {
        var template, t1, names, i, $name;
        template = new H.BoundClosure("self", "target", "receiver", "name");
        t1 = Object.getOwnPropertyNames(template);
        t1.fixed$length = init;
        names = t1;
        for (t1 = names.length, i = 0; i < t1; ++i) {
          $name = names[i];
          if (template[$name] === fieldName)
            return $name;
        }
      }}
  },
  RuntimeError: {
    "^": "Error;message",
    toString$0: function(_) {
      return "RuntimeError: " + H.S(this.message);
    },
    static: {RuntimeError$: function(message) {
        return new H.RuntimeError(message);
      }}
  }
}],
["bignum", "package:bignum/bignum.dart", , Z, {
  "^": "",
  JSArray: {
    "^": "Object;data",
    $indexSet: function(_, index, value) {
      var t1, t2;
      t1 = this.data;
      t2 = J.getInterceptor$n(index);
      if (t2.$gt(index, t1.length - 1))
        C.JSArray_methods.set$length(t1, t2.$add(index, 1));
      if (index >>> 0 !== index || index >= t1.length)
        return H.ioore(t1, index);
      t1[index] = value;
      return value;
    }
  },
  BigInteger: {
    "^": "Object;_lowprimes,_lplim,canary,_j_lm,array<,am,BI_RM,BI_RC,t<,s<,_debugging",
    am$6: function(arg0, arg1, arg2, arg3, arg4, arg5) {
      return this.am.call$6(arg0, arg1, arg2, arg3, arg4, arg5);
    },
    _am3$6: [function(i, x, w, j, c, n) {
      var this_array, w_array, xl, xh, t1, l, i0, h, m, t2, t3, t4, j0;
      this_array = this.array;
      w_array = w.get$array();
      xl = J.getInterceptor$n(x).toInt$0(x) & 16383;
      xh = C.JSInt_methods._shrOtherPositive$1(C.JSNumber_methods.toInt$0(x), 14);
      for (; n = J.$sub$n(n, 1), J.$ge$n(n, 0); j = j0, i = i0) {
        t1 = this_array.data;
        if (i >>> 0 !== i || i >= t1.length)
          return H.ioore(t1, i);
        l = J.$and$n(t1[i], 16383);
        i0 = i + 1;
        if (i >= t1.length)
          return H.ioore(t1, i);
        h = J.$shr$n(t1[i], 14);
        t1 = J.$mul$ns(h, xl);
        if (typeof t1 !== "number")
          return H.iae(t1);
        m = xh * l + t1;
        t1 = w_array.data;
        t2 = t1.length;
        if (j >>> 0 !== j || j >= t2)
          return H.ioore(t1, j);
        t3 = t1[j];
        if (typeof t3 !== "number")
          return H.iae(t3);
        if (typeof c !== "number")
          return H.iae(c);
        l = xl * l + ((m & 16383) << 14 >>> 0) + t3 + c;
        t3 = C.JSNumber_methods._shrOtherPositive$1(l, 28);
        t4 = C.JSNumber_methods._shrOtherPositive$1(m, 14);
        if (typeof h !== "number")
          return H.iae(h);
        c = t3 + t4 + xh * h;
        j0 = j + 1;
        if (j > t2 - 1)
          C.JSArray_methods.set$length(t1, j0);
        if (j >= t1.length)
          return H.ioore(t1, j);
        t1[j] = l & 268435455;
      }
      return c;
    }, "call$6", "get$_am3", 12, 0, 4],
    _setupDigitConversions$0: function() {
      var rr, vv, rr0;
      this.BI_RM = "0123456789abcdefghijklmnopqrstuvwxyz";
      this.BI_RC = P.LinkedHashMap_LinkedHashMap(null, null, null, null, null);
      rr = C.JSString_methods.codeUnitAt$1("0", 0);
      for (vv = 0; vv <= 9; ++vv, rr = rr0) {
        rr0 = rr + 1;
        this.BI_RC.$indexSet(0, rr, vv);
      }
      rr = C.JSString_methods.codeUnitAt$1("a", 0);
      for (vv = 10; vv < 36; ++vv, rr = rr0) {
        rr0 = rr + 1;
        this.BI_RC.$indexSet(0, rr, vv);
      }
      rr = C.JSString_methods.codeUnitAt$1("A", 0);
      for (vv = 10; vv < 36; ++vv, rr = rr0) {
        rr0 = rr + 1;
        this.BI_RC.$indexSet(0, rr, vv);
      }
    },
    copyTo$1: function(r) {
      var this_array, r_array, t1, i, t2;
      this_array = this.array;
      r_array = r.array;
      t1 = this.t;
      if (typeof t1 !== "number")
        return t1.$sub();
      i = t1 - 1;
      for (; i >= 0; --i) {
        t1 = this_array.data;
        if (i >>> 0 !== i || i >= t1.length)
          return H.ioore(t1, i);
        t1 = t1[i];
        t2 = r_array.data;
        if (i > t2.length - 1)
          C.JSArray_methods.set$length(t2, i + 1);
        if (i >= t2.length)
          return H.ioore(t2, i);
        t2[i] = t1;
      }
      r.t = this.t;
      r.s = this.s;
    },
    fromInt$1: function(x) {
      var this_array, t1;
      this_array = this.array;
      this.t = 1;
      this.s = x < 0 ? -1 : 0;
      if (x > 0)
        this_array.$indexSet(0, 0, x);
      else if (x < -1) {
        t1 = $.BigInteger_BI_DV;
        if (typeof t1 !== "number")
          return H.iae(t1);
        this_array.$indexSet(0, 0, x + t1);
      } else
        this.t = 0;
    },
    fromString$2: function(s, b) {
      var this_array, k, i, t1, t2, mi, sh, x, t3, c, t4, t5, t6, t7, r;
      this_array = this.array;
      if (b === 16)
        k = 4;
      else if (b === 8)
        k = 3;
      else if (b === 256)
        k = 8;
      else if (b === 2)
        k = 1;
      else if (b === 32)
        k = 5;
      else {
        if (b === 4)
          ;
        else {
          this.fromRadix$2(s, b);
          return;
        }
        k = 2;
      }
      this.t = 0;
      this.s = 0;
      i = J.get$length$as(s);
      for (t1 = s.length, t2 = k === 8, mi = false, sh = 0; --i, i >= 0;) {
        if (t2) {
          if (i >= t1)
            return H.ioore(s, i);
          x = C.JSString_methods.$and(s[i], 255);
        } else {
          t3 = this.BI_RC;
          if (i >= t1)
            H.throwExpression(P.RangeError$value(i));
          c = t3.$index(0, s.charCodeAt(i));
          x = c == null ? -1 : c;
        }
        t3 = J.getInterceptor$n(x);
        if (t3.$lt(x, 0)) {
          if (i >= t1)
            return H.ioore(s, i);
          if (s[i] === "-")
            mi = true;
          continue;
        }
        if (sh === 0) {
          t3 = this.t;
          if (typeof t3 !== "number")
            return t3.$add();
          t4 = t3 + 1;
          this.t = t4;
          t5 = this_array.data;
          if (t3 > t5.length - 1)
            C.JSArray_methods.set$length(t5, t4);
          if (t3 >>> 0 !== t3 || t3 >= t5.length)
            return H.ioore(t5, t3);
          t5[t3] = x;
        } else {
          t4 = $.BigInteger_BI_DB;
          if (typeof t4 !== "number")
            return H.iae(t4);
          t5 = this.t;
          if (sh + k > t4) {
            if (typeof t5 !== "number")
              return t5.$sub();
            --t5;
            t6 = this_array.data;
            if (t5 >>> 0 !== t5 || t5 >= t6.length)
              return H.ioore(t6, t5);
            t4 = J.$or$n(t6[t5], J.$shl$n(t3.$and(x, C.JSInt_methods.$shl(1, t4 - sh) - 1), sh));
            if (t5 > t6.length - 1)
              C.JSArray_methods.set$length(t6, t5 + 1);
            if (t5 >= t6.length)
              return H.ioore(t6, t5);
            t6[t5] = t4;
            t4 = this.t;
            if (typeof t4 !== "number")
              return t4.$add();
            t5 = t4 + 1;
            this.t = t5;
            t7 = $.BigInteger_BI_DB;
            if (typeof t7 !== "number")
              return t7.$sub();
            t7 = t3.$shr(x, t7 - sh);
            if (t4 > t6.length - 1)
              C.JSArray_methods.set$length(t6, t5);
            if (t4 >>> 0 !== t4 || t4 >= t6.length)
              return H.ioore(t6, t4);
            t6[t4] = t7;
          } else {
            if (typeof t5 !== "number")
              return t5.$sub();
            t4 = t5 - 1;
            t5 = this_array.data;
            if (t4 >>> 0 !== t4 || t4 >= t5.length)
              return H.ioore(t5, t4);
            t3 = J.$or$n(t5[t4], t3.$shl(x, sh));
            if (t4 > t5.length - 1)
              C.JSArray_methods.set$length(t5, t4 + 1);
            if (t4 >= t5.length)
              return H.ioore(t5, t4);
            t5[t4] = t3;
          }
        }
        sh += k;
        t3 = $.BigInteger_BI_DB;
        if (typeof t3 !== "number")
          return H.iae(t3);
        if (sh >= t3)
          sh -= t3;
        mi = false;
      }
      if (t2) {
        if (0 >= t1)
          return H.ioore(s, 0);
        C.JSString_methods.$and(s[0], 128);
        t1 = true;
      } else
        t1 = false;
      if (t1) {
        this.s = -1;
        if (sh > 0) {
          t1 = this.t;
          if (typeof t1 !== "number")
            return t1.$sub();
          --t1;
          t2 = this_array.data;
          if (t1 >>> 0 !== t1 || t1 >= t2.length)
            return H.ioore(t2, t1);
          t2 = t2[t1];
          t3 = $.BigInteger_BI_DB;
          if (typeof t3 !== "number")
            return t3.$sub();
          this_array.$indexSet(0, t1, J.$or$n(t2, C.JSInt_methods.$shl(C.JSInt_methods.$shl(1, t3 - sh) - 1, sh)));
        }
      }
      this.clamp$0(0);
      if (mi) {
        r = Z.BigInteger$(null, null, null);
        r.fromInt$1(0);
        r.subTo$2(this, this);
      }
    },
    toString$1: function(_, b) {
      if (J.$lt$n(this.s, 0))
        return "-" + this.negate_op$0().toString$1(0, b);
      return this.toRadix$1(b);
    },
    toString$0: function($receiver) {
      return this.toString$1($receiver, null);
    },
    negate_op$0: function() {
      var r, r0;
      r = Z.BigInteger$(null, null, null);
      r0 = Z.BigInteger$(null, null, null);
      r0.fromInt$1(0);
      r0.subTo$2(this, r);
      return r;
    },
    abs$0: function(_) {
      return J.$lt$n(this.s, 0) ? this.negate_op$0() : this;
    },
    compareTo$1: function(_, a) {
      var this_array, a_array, r, i, t1, t2;
      if (typeof a === "number")
        a = Z.BigInteger$(a, null, null);
      this_array = this.array;
      a_array = a.get$array();
      r = J.$sub$n(this.s, a.s);
      if (!J.$eq(r, 0))
        return r;
      i = this.t;
      t1 = a.t;
      if (typeof i !== "number")
        return i.$sub();
      if (typeof t1 !== "number")
        return H.iae(t1);
      r = i - t1;
      if (r !== 0)
        return r;
      for (; --i, i >= 0;) {
        t1 = this_array.data;
        if (i >>> 0 !== i || i >= t1.length)
          return H.ioore(t1, i);
        t1 = t1[i];
        t2 = a_array.data;
        if (i >= t2.length)
          return H.ioore(t2, i);
        r = J.$sub$n(t1, t2[i]);
        if (!J.$eq(r, 0))
          return r;
      }
      return 0;
    },
    dlShiftTo$2: function(n, r) {
      var this_array, r_array, t1, i, t2, t3;
      this_array = this.array;
      r_array = r.array;
      t1 = this.t;
      if (typeof t1 !== "number")
        return t1.$sub();
      i = t1 - 1;
      for (; i >= 0; --i) {
        t1 = i + n;
        t2 = this_array.data;
        if (i >>> 0 !== i || i >= t2.length)
          return H.ioore(t2, i);
        t2 = t2[i];
        t3 = r_array.data;
        if (t1 > t3.length - 1)
          C.JSArray_methods.set$length(t3, t1 + 1);
        if (t1 >>> 0 !== t1 || t1 >= t3.length)
          return H.ioore(t3, t1);
        t3[t1] = t2;
      }
      for (i = n - 1; i >= 0; --i) {
        t1 = r_array.data;
        if (i > t1.length - 1)
          C.JSArray_methods.set$length(t1, i + 1);
        if (i >>> 0 !== i || i >= t1.length)
          return H.ioore(t1, i);
        t1[i] = 0;
      }
      t1 = this.t;
      if (typeof t1 !== "number")
        return t1.$add();
      r.t = t1 + n;
      r.s = this.s;
    },
    drShiftTo$2: function(n, r) {
      var this_array, r_array, i, t1, t2, t3;
      this_array = this.array;
      r_array = r.array;
      i = n;
      while (true) {
        t1 = this.t;
        if (typeof t1 !== "number")
          return H.iae(t1);
        if (!(i < t1))
          break;
        t1 = i - n;
        t2 = this_array.data;
        if (i >>> 0 !== i || i >= t2.length)
          return H.ioore(t2, i);
        t2 = t2[i];
        t3 = r_array.data;
        if (t1 > t3.length - 1)
          C.JSArray_methods.set$length(t3, t1 + 1);
        if (t1 >>> 0 !== t1 || t1 >= t3.length)
          return H.ioore(t3, t1);
        t3[t1] = t2;
        ++i;
      }
      r.t = P.max(t1 - n, 0);
      r.s = this.s;
    },
    lShiftTo$2: function(n, r) {
      var this_array, r_array, t1, bs, t2, cbs, bm, ds, c, i, t3, t4;
      this_array = this.array;
      r_array = r.array;
      t1 = J.getInterceptor$n(n);
      bs = t1.$mod(n, $.BigInteger_BI_DB);
      t2 = $.BigInteger_BI_DB;
      if (typeof t2 !== "number")
        return t2.$sub();
      if (typeof bs !== "number")
        return H.iae(bs);
      cbs = t2 - bs;
      bm = C.JSInt_methods.$shl(1, cbs) - 1;
      ds = t1.$tdiv(n, t2);
      c = J.$and$n(J.$shl$n(this.s, bs), $.BigInteger_BI_DM);
      t1 = this.t;
      if (typeof t1 !== "number")
        return t1.$sub();
      i = t1 - 1;
      for (; i >= 0; --i) {
        if (typeof ds !== "number")
          return H.iae(ds);
        t1 = i + ds + 1;
        t2 = this_array.data;
        if (i >>> 0 !== i || i >= t2.length)
          return H.ioore(t2, i);
        t3 = J.$or$n(J.$shr$n(t2[i], cbs), c);
        t4 = r_array.data;
        if (t1 > t4.length - 1)
          C.JSArray_methods.set$length(t4, t1 + 1);
        if (t1 >>> 0 !== t1 || t1 >= t4.length)
          return H.ioore(t4, t1);
        t4[t1] = t3;
        if (i >= t2.length)
          return H.ioore(t2, i);
        c = J.$shl$n(J.$and$n(t2[i], bm), bs);
      }
      for (i = J.$sub$n(ds, 1); t1 = J.getInterceptor$n(i), t1.$ge(i, 0); --i) {
        t2 = r_array.data;
        if (t1.$gt(i, t2.length - 1))
          C.JSArray_methods.set$length(t2, t1.$add(i, 1));
        if (i >>> 0 !== i || i >= t2.length)
          return H.ioore(t2, i);
        t2[i] = 0;
      }
      r_array.$indexSet(0, ds, c);
      t1 = this.t;
      if (typeof t1 !== "number")
        return t1.$add();
      if (typeof ds !== "number")
        return H.iae(ds);
      r.t = t1 + ds + 1;
      r.s = this.s;
      r.clamp$0(0);
    },
    rShiftTo$2: function(n, r) {
      var this_array, r_array, t1, ds, bs, cbs, bm, i, t2, t3, t4;
      this_array = this.array;
      r_array = r.array;
      r.s = this.s;
      t1 = J.getInterceptor$n(n);
      ds = t1.$tdiv(n, $.BigInteger_BI_DB);
      if (J.$ge$n(ds, this.t)) {
        r.t = 0;
        return;
      }
      bs = t1.$mod(n, $.BigInteger_BI_DB);
      t1 = $.BigInteger_BI_DB;
      if (typeof t1 !== "number")
        return t1.$sub();
      if (typeof bs !== "number")
        return H.iae(bs);
      cbs = t1 - bs;
      bm = C.JSInt_methods.$shl(1, bs) - 1;
      t1 = this_array.data;
      if (ds >>> 0 !== ds || ds >= t1.length)
        return H.ioore(t1, ds);
      r_array.$indexSet(0, 0, J.$shr$n(t1[ds], bs));
      i = ds + 1;
      t2 = r_array.data;
      while (true) {
        t3 = this.t;
        if (typeof t3 !== "number")
          return H.iae(t3);
        if (!(i < t3))
          break;
        t3 = i - ds - 1;
        if (t3 < 0 || t3 >= t2.length)
          return H.ioore(t2, t3);
        t4 = t2[t3];
        if (i >= t1.length)
          return H.ioore(t1, i);
        t4 = J.$or$n(t4, J.$shl$n(J.$and$n(t1[i], bm), cbs));
        if (t3 > t2.length - 1)
          C.JSArray_methods.set$length(t2, t3 + 1);
        if (t3 >= t2.length)
          return H.ioore(t2, t3);
        t2[t3] = t4;
        t3 = i - ds;
        if (i >= t1.length)
          return H.ioore(t1, i);
        t4 = J.$shr$n(t1[i], bs);
        if (t3 > t2.length - 1)
          C.JSArray_methods.set$length(t2, t3 + 1);
        if (t3 < 0 || t3 >= t2.length)
          return H.ioore(t2, t3);
        t2[t3] = t4;
        ++i;
      }
      if (bs > 0) {
        t1 = this.t;
        if (typeof t1 !== "number")
          return t1.$sub();
        t1 = t1 - ds - 1;
        if (t1 >>> 0 !== t1 || t1 >= t2.length)
          return H.ioore(t2, t1);
        r_array.$indexSet(r_array, t1, J.$or$n(t2[t1], J.$shl$n(J.$and$n(this.s, bm), cbs)));
      }
      t1 = this.t;
      if (typeof t1 !== "number")
        return t1.$sub();
      r.t = t1 - ds;
      r.clamp$0(0);
    },
    clamp$0: function(_) {
      var this_array, c, t1, t2;
      this_array = this.array;
      c = J.$and$n(this.s, $.BigInteger_BI_DM);
      while (true) {
        t1 = this.t;
        if (typeof t1 !== "number")
          return t1.$gt();
        if (t1 > 0) {
          --t1;
          t2 = this_array.data;
          if (t1 >>> 0 !== t1 || t1 >= t2.length)
            return H.ioore(t2, t1);
          t1 = J.$eq(t2[t1], c);
        } else
          t1 = false;
        if (!t1)
          break;
        t1 = this.t;
        if (typeof t1 !== "number")
          return t1.$sub();
        this.t = t1 - 1;
      }
    },
    subTo$2: function(a, r) {
      var this_array, r_array, a_array, m, i, c, t1, t2, i0;
      this_array = this.array;
      r_array = r.array;
      a_array = a.get$array();
      m = P.min(a.t, this.t);
      for (i = 0, c = 0; i < m; i = i0) {
        t1 = this_array.data;
        if (i >= t1.length)
          return H.ioore(t1, i);
        t1 = J.toInt$0$n(t1[i]);
        t2 = a_array.data;
        if (i >= t2.length)
          return H.ioore(t2, i);
        c += C.JSInt_methods.toInt$0(t1 - J.toInt$0$n(t2[i]));
        i0 = i + 1;
        t2 = $.BigInteger_BI_DM;
        if (typeof t2 !== "number")
          return H.iae(t2);
        t1 = r_array.data;
        if (i > t1.length - 1)
          C.JSArray_methods.set$length(t1, i0);
        if (i >= t1.length)
          return H.ioore(t1, i);
        t1[i] = (c & t2) >>> 0;
        t1 = $.BigInteger_BI_DB;
        if (typeof t1 !== "number")
          return H.iae(t1);
        c = C.JSInt_methods._shrOtherPositive$1(c, t1);
        if (c === 4294967295)
          c = -1;
      }
      t1 = a.t;
      t2 = this.t;
      if (typeof t1 !== "number")
        return t1.$lt();
      if (typeof t2 !== "number")
        return H.iae(t2);
      if (t1 < t2) {
        t1 = a.s;
        if (typeof t1 !== "number")
          return H.iae(t1);
        c -= t1;
        while (true) {
          t1 = this.t;
          if (typeof t1 !== "number")
            return H.iae(t1);
          if (!(i < t1))
            break;
          t1 = this_array.data;
          if (i >= t1.length)
            return H.ioore(t1, i);
          t1 = t1[i];
          if (typeof t1 !== "number")
            return H.iae(t1);
          c += t1;
          i0 = i + 1;
          t1 = $.BigInteger_BI_DM;
          if (typeof t1 !== "number")
            return H.iae(t1);
          t2 = r_array.data;
          if (i > t2.length - 1)
            C.JSArray_methods.set$length(t2, i0);
          if (i >= t2.length)
            return H.ioore(t2, i);
          t2[i] = (c & t1) >>> 0;
          t1 = $.BigInteger_BI_DB;
          if (typeof t1 !== "number")
            return H.iae(t1);
          c = C.JSNumber_methods._shrOtherPositive$1(c, t1);
          if (c === 4294967295)
            c = -1;
          i = i0;
        }
        t1 = this.s;
        if (typeof t1 !== "number")
          return H.iae(t1);
        c += t1;
      } else {
        t1 = this.s;
        if (typeof t1 !== "number")
          return H.iae(t1);
        c += t1;
        while (true) {
          t1 = a.t;
          if (typeof t1 !== "number")
            return H.iae(t1);
          if (!(i < t1))
            break;
          t1 = a_array.data;
          if (i >= t1.length)
            return H.ioore(t1, i);
          t1 = t1[i];
          if (typeof t1 !== "number")
            return H.iae(t1);
          c -= t1;
          i0 = i + 1;
          t1 = $.BigInteger_BI_DM;
          if (typeof t1 !== "number")
            return H.iae(t1);
          t2 = r_array.data;
          if (i > t2.length - 1)
            C.JSArray_methods.set$length(t2, i0);
          if (i >= t2.length)
            return H.ioore(t2, i);
          t2[i] = (c & t1) >>> 0;
          t1 = $.BigInteger_BI_DB;
          if (typeof t1 !== "number")
            return H.iae(t1);
          c = C.JSNumber_methods._shrOtherPositive$1(c, t1);
          if (c === 4294967295)
            c = -1;
          i = i0;
        }
        t1 = a.s;
        if (typeof t1 !== "number")
          return H.iae(t1);
        c -= t1;
      }
      r.s = c < 0 ? -1 : 0;
      if (c < -1) {
        i0 = i + 1;
        t1 = $.BigInteger_BI_DV;
        if (typeof t1 !== "number")
          return t1.$add();
        r_array.$indexSet(0, i, t1 + c);
        i = i0;
      } else if (c > 0) {
        i0 = i + 1;
        r_array.$indexSet(0, i, c);
        i = i0;
      }
      r.t = i;
      r.clamp$0(0);
    },
    multiplyTo$2: function(a, r) {
      var r_array, x, y, y_array, i, t1, t2, t3, t4, r0;
      r_array = r.array;
      x = J.$lt$n(this.s, 0) ? this.negate_op$0() : this;
      y = Math.abs(a);
      y_array = y.get$array();
      i = x.t;
      t1 = y.get$t();
      if (typeof i !== "number")
        return i.$add();
      r.t = C.JSNumber_methods.$add(i, t1);
      for (; --i, i >= 0;) {
        t2 = r_array.data;
        if (i > t2.length - 1)
          C.JSArray_methods.set$length(t2, i + 1);
        if (i >>> 0 !== i || i >= t2.length)
          return H.ioore(t2, i);
        t2[i] = 0;
      }
      for (i = 0; C.JSInt_methods.$lt(i, t1); ++i) {
        t2 = x.t;
        if (typeof t2 !== "number")
          return H.iae(t2);
        t3 = i + t2;
        t2 = x.am$6(0, y_array.$index(0, i), r, i, 0, t2);
        t4 = r_array.data;
        if (t3 > t4.length - 1)
          C.JSArray_methods.set$length(t4, t3 + 1);
        if (t3 >>> 0 !== t3 || t3 >= t4.length)
          return H.ioore(t4, t3);
        t4[t3] = t2;
      }
      r.s = 0;
      r.clamp$0(0);
      if (!J.$eq(this.s, a.get$s())) {
        r0 = Z.BigInteger$(null, null, null);
        r0.fromInt$1(0);
        r0.subTo$2(r, r);
      }
    },
    divRemTo$3: function(m, q, r) {
      var pm, t1, pt, t2, y, ts, ms, pm_array, t3, x, t, r0, nsh, ys, y_array, y0, t4, yt, d1, d2, e, i, j, r_array, t5, qd;
      pm = J.abs$0$n(m);
      t1 = pm.get$t();
      if (typeof t1 !== "number")
        return t1.$le();
      if (t1 <= 0)
        return;
      pt = J.$lt$n(this.s, 0) ? this.negate_op$0() : this;
      t1 = pt.t;
      t2 = pm.t;
      if (typeof t1 !== "number")
        return t1.$lt();
      if (typeof t2 !== "number")
        return H.iae(t2);
      if (t1 < t2) {
        if (q != null)
          q.fromInt$1(0);
        if (r != null)
          this.copyTo$1(r);
        return;
      }
      if (r == null)
        r = Z.BigInteger$(null, null, null);
      y = Z.BigInteger$(null, null, null);
      ts = this.s;
      ms = m.get$s();
      pm_array = pm.array;
      t1 = $.BigInteger_BI_DB;
      t2 = pm.t;
      if (typeof t2 !== "number")
        return t2.$sub();
      --t2;
      t3 = pm_array.data;
      if (t2 >>> 0 !== t2 || t2 >= t3.length)
        return H.ioore(t3, t2);
      x = t3[t2];
      if (typeof x === "number")
        x = C.JSNumber_methods.toInt$0(x);
      t = J.$shr$n(x, 16);
      if (!J.$eq(t, 0)) {
        x = t;
        r0 = 17;
      } else
        r0 = 1;
      t = J.$shr$n(x, 8);
      if (!J.$eq(t, 0)) {
        r0 += 8;
        x = t;
      }
      t = J.$shr$n(x, 4);
      if (!J.$eq(t, 0)) {
        r0 += 4;
        x = t;
      }
      t = J.$shr$n(x, 2);
      if (!J.$eq(t, 0)) {
        r0 += 2;
        x = t;
      }
      if (!J.$eq(J.$shr$n(x, 1), 0))
        ++r0;
      if (typeof t1 !== "number")
        return t1.$sub();
      nsh = t1 - r0;
      t1 = nsh > 0;
      if (t1) {
        pm.lShiftTo$2(nsh, y);
        pt.lShiftTo$2(nsh, r);
      } else {
        pm.copyTo$1(y);
        pt.copyTo$1(r);
      }
      ys = y.t;
      y_array = y.array;
      if (typeof ys !== "number")
        return ys.$sub();
      t2 = ys - 1;
      t3 = y_array.data;
      if (t2 >>> 0 !== t2 || t2 >= t3.length)
        return H.ioore(t3, t2);
      y0 = t3[t2];
      t2 = J.getInterceptor(y0);
      if (t2.$eq(y0, 0))
        return;
      t4 = $.BigInteger_BI_F1;
      if (typeof t4 !== "number")
        return H.iae(t4);
      t4 = t2.$mul(y0, C.JSInt_methods.$shl(1, t4));
      if (ys > 1) {
        t2 = ys - 2;
        if (t2 >>> 0 !== t2 || t2 >= t3.length)
          return H.ioore(t3, t2);
        t2 = J.$shr$n(t3[t2], $.BigInteger_BI_F2);
      } else
        t2 = 0;
      yt = J.$add$ns(t4, t2);
      t2 = $.BigInteger_BI_FV;
      if (typeof t2 !== "number")
        return t2.$div();
      if (typeof yt !== "number")
        return H.iae(yt);
      d1 = t2 / yt;
      t2 = $.BigInteger_BI_F1;
      if (typeof t2 !== "number")
        return H.iae(t2);
      d2 = C.JSInt_methods.$shl(1, t2) / yt;
      t2 = $.BigInteger_BI_F2;
      if (typeof t2 !== "number")
        return H.iae(t2);
      e = C.JSInt_methods.$shl(1, t2);
      i = r.t;
      if (typeof i !== "number")
        return i.$sub();
      j = i - ys;
      t2 = q == null;
      t = t2 ? Z.BigInteger$(null, null, null) : q;
      y.dlShiftTo$2(j, t);
      r_array = r.array;
      if (J.$ge$n(r.compareTo$1(0, t), 0)) {
        t4 = r.t;
        if (typeof t4 !== "number")
          return t4.$add();
        r.t = t4 + 1;
        r_array.$indexSet(0, t4, 1);
        r.subTo$2(t, r);
      }
      r0 = Z.BigInteger$(null, null, null);
      r0.fromInt$1(1);
      r0.dlShiftTo$2(ys, t);
      t.subTo$2(y, y);
      while (true) {
        t4 = y.t;
        if (typeof t4 !== "number")
          return t4.$lt();
        if (!(t4 < ys))
          break;
        t5 = t4 + 1;
        y.t = t5;
        if (t4 > t3.length - 1)
          C.JSArray_methods.set$length(t3, t5);
        if (t4 >>> 0 !== t4 || t4 >= t3.length)
          return H.ioore(t3, t4);
        t3[t4] = 0;
      }
      for (; --j, j >= 0;) {
        --i;
        t3 = r_array.data;
        if (i >>> 0 !== i || i >= t3.length)
          return H.ioore(t3, i);
        if (J.$eq(t3[i], y0))
          qd = $.BigInteger_BI_DM;
        else {
          if (i >= t3.length)
            return H.ioore(t3, i);
          t4 = J.$mul$ns(t3[i], d1);
          t5 = i - 1;
          if (t5 < 0 || t5 >= t3.length)
            return H.ioore(t3, t5);
          qd = J.floor$0$n(J.$add$ns(t4, J.$mul$ns(J.$add$ns(t3[t5], e), d2)));
        }
        if (i >= t3.length)
          return H.ioore(t3, i);
        t4 = J.$add$ns(t3[i], y.am$6(0, qd, r, j, 0, ys));
        if (i > t3.length - 1)
          C.JSArray_methods.set$length(t3, i + 1);
        if (i >= t3.length)
          return H.ioore(t3, i);
        t3[i] = t4;
        if (J.$lt$n(t4, qd)) {
          y.dlShiftTo$2(j, t);
          r.subTo$2(t, r);
          while (true) {
            if (i >= t3.length)
              return H.ioore(t3, i);
            t4 = t3[i];
            if (typeof qd !== "number")
              return qd.$sub();
            --qd;
            if (!J.$lt$n(t4, qd))
              break;
            r.subTo$2(t, r);
          }
        }
      }
      if (!t2) {
        r.drShiftTo$2(ys, q);
        if (!J.$eq(ts, ms)) {
          r0 = Z.BigInteger$(null, null, null);
          r0.fromInt$1(0);
          r0.subTo$2(q, q);
        }
      }
      r.t = ys;
      r.clamp$0(0);
      if (t1)
        r.rShiftTo$2(nsh, r);
      if (J.$lt$n(ts, 0)) {
        r0 = Z.BigInteger$(null, null, null);
        r0.fromInt$1(0);
        r0.subTo$2(r, r);
      }
    },
    intValue$0: function() {
      var this_array, t1, t2, t3;
      this_array = this.array;
      if (J.$lt$n(this.s, 0)) {
        t1 = this.t;
        if (t1 === 1) {
          t1 = this_array.data;
          if (0 >= t1.length)
            return H.ioore(t1, 0);
          return J.$sub$n(t1[0], $.BigInteger_BI_DV);
        } else if (t1 === 0)
          return -1;
      } else {
        t1 = this.t;
        if (t1 === 1) {
          t1 = this_array.data;
          if (0 >= t1.length)
            return H.ioore(t1, 0);
          return t1[0];
        } else if (t1 === 0)
          return 0;
      }
      t1 = this_array.data;
      if (1 >= t1.length)
        return H.ioore(t1, 1);
      t2 = t1[1];
      t3 = $.BigInteger_BI_DB;
      if (typeof t3 !== "number")
        return H.iae(t3);
      t3 = J.$shl$n(J.$and$n(t2, C.JSInt_methods.$shl(1, 32 - t3) - 1), $.BigInteger_BI_DB);
      if (0 >= t1.length)
        return H.ioore(t1, 0);
      return J.$or$n(t3, t1[0]);
    },
    chunkSize$1: function(r) {
      var t1 = $.BigInteger_BI_DB;
      if (typeof t1 !== "number")
        return H.iae(t1);
      if (typeof r !== "number")
        H.throwExpression(P.ArgumentError$(r));
      return C.JSInt_methods.toInt$0(C.JSNumber_methods.toInt$0(Math.floor(0.6931471805599453 * t1 / Math.log(r))));
    },
    signum$0: function() {
      var this_array, t1;
      this_array = this.array;
      if (J.$lt$n(this.s, 0))
        return -1;
      else {
        t1 = this.t;
        if (typeof t1 !== "number")
          return t1.$le();
        if (!(t1 <= 0))
          if (t1 === 1) {
            t1 = this_array.data;
            if (0 >= t1.length)
              return H.ioore(t1, 0);
            t1 = J.$le$n(t1[0], 0);
          } else
            t1 = false;
        else
          t1 = true;
        if (t1)
          return 0;
        else
          return 1;
      }
    },
    toRadix$1: function(b) {
      var t1, cs, a, r, y, z, r0;
      if (this.signum$0() !== 0)
        t1 = false;
      else
        t1 = true;
      if (t1)
        return "0";
      cs = this.chunkSize$1(10);
      a = Math.pow(10, cs);
      r = Z.BigInteger$(null, null, null);
      r.fromInt$1(a);
      y = Z.BigInteger$(null, null, null);
      z = Z.BigInteger$(null, null, null);
      this.divRemTo$3(r, y, z);
      for (r0 = ""; y.signum$0() > 0;) {
        t1 = z.intValue$0();
        if (typeof t1 !== "number")
          return H.iae(t1);
        t1 = C.JSNumber_methods.toInt$0(a + t1);
        r0 = C.JSString_methods.substring$1(t1.toString(10), 1) + r0;
        y.divRemTo$3(r, y, z);
      }
      return J.toRadixString$1$n(z.intValue$0(), 10) + r0;
    },
    fromRadix$2: function(s, b) {
      var cs, t1, d, t2, mi, j, w, i, t3, t4, c, x, r;
      this.fromInt$1(0);
      if (b == null)
        b = 10;
      cs = this.chunkSize$1(b);
      t1 = typeof b !== "number";
      if (t1)
        H.throwExpression(P.ArgumentError$(b));
      d = Math.pow(b, cs);
      for (t2 = J.getInterceptor$as(s), mi = false, j = 0, w = 0, i = 0; i < t2.get$length(s); ++i) {
        t3 = this.BI_RC;
        t4 = s.length;
        if (i >= t4)
          H.throwExpression(P.RangeError$value(i));
        c = t3.$index(0, s.charCodeAt(i));
        x = c == null ? -1 : c;
        if (J.$lt$n(x, 0)) {
          if (0 >= t4)
            return H.ioore(s, 0);
          if (s[0] === "-" && this.signum$0() === 0)
            mi = true;
          continue;
        }
        if (typeof b !== "number")
          return b.$mul();
        if (typeof x !== "number")
          return H.iae(x);
        w = b * w + x;
        ++j;
        if (j >= cs) {
          this.dMultiply$1(d);
          this.dAddOffset$2(w, 0);
          j = 0;
          w = 0;
        }
      }
      if (j > 0) {
        if (t1)
          H.throwExpression(P.ArgumentError$(b));
        this.dMultiply$1(Math.pow(b, j));
        if (w !== 0)
          this.dAddOffset$2(w, 0);
      }
      if (mi) {
        r = Z.BigInteger$(null, null, null);
        r.fromInt$1(0);
        r.subTo$2(this, this);
      }
    },
    bitwiseTo$3: function(a, op, r) {
      var this_array, a_array, r_array, m, i, t1, t2, t3, f;
      this_array = this.array;
      a_array = a.get$array();
      r_array = r.array;
      m = P.min(a.t, this.t);
      for (i = 0; i < m; ++i) {
        t1 = this_array.data;
        if (i >= t1.length)
          return H.ioore(t1, i);
        t1 = t1[i];
        t2 = a_array.data;
        if (i >= t2.length)
          return H.ioore(t2, i);
        t2 = op.call$2(t1, t2[i]);
        t1 = r_array.data;
        if (i > t1.length - 1)
          C.JSArray_methods.set$length(t1, i + 1);
        if (i >= t1.length)
          return H.ioore(t1, i);
        t1[i] = t2;
      }
      t1 = a.t;
      t2 = this.t;
      if (typeof t1 !== "number")
        return t1.$lt();
      if (typeof t2 !== "number")
        return H.iae(t2);
      t3 = $.BigInteger_BI_DM;
      if (t1 < t2) {
        f = J.$and$n(a.s, t3);
        i = m;
        while (true) {
          t1 = this.t;
          if (typeof t1 !== "number")
            return H.iae(t1);
          if (!(i < t1))
            break;
          t1 = this_array.data;
          if (i >>> 0 !== i || i >= t1.length)
            return H.ioore(t1, i);
          t1 = op.call$2(t1[i], f);
          t2 = r_array.data;
          if (i > t2.length - 1)
            C.JSArray_methods.set$length(t2, i + 1);
          if (i >= t2.length)
            return H.ioore(t2, i);
          t2[i] = t1;
          ++i;
        }
        r.t = t1;
      } else {
        f = J.$and$n(this.s, t3);
        i = m;
        while (true) {
          t1 = a.t;
          if (typeof t1 !== "number")
            return H.iae(t1);
          if (!(i < t1))
            break;
          t1 = a_array.data;
          if (i >>> 0 !== i || i >= t1.length)
            return H.ioore(t1, i);
          t1 = op.call$2(f, t1[i]);
          t2 = r_array.data;
          if (i > t2.length - 1)
            C.JSArray_methods.set$length(t2, i + 1);
          if (i >= t2.length)
            return H.ioore(t2, i);
          t2[i] = t1;
          ++i;
        }
        r.t = t1;
      }
      r.s = op.call$2(this.s, a.s);
      r.clamp$0(0);
    },
    op_and$2: [function(x, y) {
      return J.$and$n(x, y);
    }, "call$2", "get$op_and", 4, 0, 5],
    op_or$2: [function(x, y) {
      return J.$or$n(x, y);
    }, "call$2", "get$op_or", 4, 0, 5],
    addTo$2: function(a, r) {
      var this_array, a_array, r_array, m, i, c, t1, t2, i0;
      this_array = this.array;
      a_array = a.get$array();
      r_array = r.array;
      m = P.min(a.t, this.t);
      for (i = 0, c = 0; i < m; i = i0) {
        t1 = this_array.data;
        if (i >= t1.length)
          return H.ioore(t1, i);
        t1 = t1[i];
        t2 = a_array.data;
        if (i >= t2.length)
          return H.ioore(t2, i);
        t2 = J.$add$ns(t1, t2[i]);
        if (typeof t2 !== "number")
          return H.iae(t2);
        c += t2;
        i0 = i + 1;
        t2 = $.BigInteger_BI_DM;
        if (typeof t2 !== "number")
          return H.iae(t2);
        t1 = r_array.data;
        if (i > t1.length - 1)
          C.JSArray_methods.set$length(t1, i0);
        if (i >= t1.length)
          return H.ioore(t1, i);
        t1[i] = (c & t2) >>> 0;
        t1 = $.BigInteger_BI_DB;
        if (typeof t1 !== "number")
          return H.iae(t1);
        c = C.JSNumber_methods._shrOtherPositive$1(c, t1);
      }
      t1 = a.t;
      t2 = this.t;
      if (typeof t1 !== "number")
        return t1.$lt();
      if (typeof t2 !== "number")
        return H.iae(t2);
      if (t1 < t2) {
        t1 = a.s;
        if (typeof t1 !== "number")
          return H.iae(t1);
        c += t1;
        while (true) {
          t1 = this.t;
          if (typeof t1 !== "number")
            return H.iae(t1);
          if (!(i < t1))
            break;
          t1 = this_array.data;
          if (i >= t1.length)
            return H.ioore(t1, i);
          t1 = t1[i];
          if (typeof t1 !== "number")
            return H.iae(t1);
          c += t1;
          i0 = i + 1;
          t1 = $.BigInteger_BI_DM;
          if (typeof t1 !== "number")
            return H.iae(t1);
          t2 = r_array.data;
          if (i > t2.length - 1)
            C.JSArray_methods.set$length(t2, i0);
          if (i >= t2.length)
            return H.ioore(t2, i);
          t2[i] = (c & t1) >>> 0;
          t1 = $.BigInteger_BI_DB;
          if (typeof t1 !== "number")
            return H.iae(t1);
          c = C.JSNumber_methods._shrOtherPositive$1(c, t1);
          i = i0;
        }
        t1 = this.s;
        if (typeof t1 !== "number")
          return H.iae(t1);
        c += t1;
      } else {
        t1 = this.s;
        if (typeof t1 !== "number")
          return H.iae(t1);
        c += t1;
        while (true) {
          t1 = a.t;
          if (typeof t1 !== "number")
            return H.iae(t1);
          if (!(i < t1))
            break;
          t1 = a_array.data;
          if (i >= t1.length)
            return H.ioore(t1, i);
          t1 = t1[i];
          if (typeof t1 !== "number")
            return H.iae(t1);
          c += t1;
          i0 = i + 1;
          t1 = $.BigInteger_BI_DM;
          if (typeof t1 !== "number")
            return H.iae(t1);
          t2 = r_array.data;
          if (i > t2.length - 1)
            C.JSArray_methods.set$length(t2, i0);
          if (i >= t2.length)
            return H.ioore(t2, i);
          t2[i] = (c & t1) >>> 0;
          t1 = $.BigInteger_BI_DB;
          if (typeof t1 !== "number")
            return H.iae(t1);
          c = C.JSNumber_methods._shrOtherPositive$1(c, t1);
          i = i0;
        }
        t1 = a.s;
        if (typeof t1 !== "number")
          return H.iae(t1);
        c += t1;
      }
      r.s = c < 0 ? -1 : 0;
      if (c > 0) {
        i0 = i + 1;
        r_array.$indexSet(0, i, c);
        i = i0;
      } else if (c < -1) {
        i0 = i + 1;
        t1 = $.BigInteger_BI_DV;
        if (typeof t1 !== "number")
          return t1.$add();
        r_array.$indexSet(0, i, t1 + c);
        i = i0;
      }
      r.t = i;
      r.clamp$0(0);
    },
    add$1: function(_, a) {
      var r = Z.BigInteger$(null, null, null);
      this.addTo$2(a, r);
      return r;
    },
    subtract$1: function(a) {
      var r = Z.BigInteger$(null, null, null);
      this.subTo$2(a, r);
      return r;
    },
    divide$1: function(a) {
      var r = Z.BigInteger$(null, null, null);
      this.divRemTo$3(a, r, null);
      return r;
    },
    dMultiply$1: function(n) {
      var this_array, t1, t2, t3, t4;
      this_array = this.array;
      t1 = this.t;
      t2 = this.am$6(0, n - 1, this, 0, 0, t1);
      t3 = this_array.data;
      t4 = t3.length;
      if (typeof t1 !== "number")
        return t1.$gt();
      if (t1 > t4 - 1)
        C.JSArray_methods.set$length(t3, t1 + 1);
      if (t1 >>> 0 !== t1 || t1 >= t3.length)
        return H.ioore(t3, t1);
      t3[t1] = t2;
      t1 = this.t;
      if (typeof t1 !== "number")
        return t1.$add();
      this.t = t1 + 1;
      this.clamp$0(0);
    },
    dAddOffset$2: function(n, w) {
      var this_array, t1, t2, t3, t4;
      this_array = this.array;
      while (true) {
        t1 = this.t;
        if (typeof t1 !== "number")
          return t1.$le();
        if (!(t1 <= w))
          break;
        t2 = t1 + 1;
        this.t = t2;
        t3 = this_array.data;
        if (t1 > t3.length - 1)
          C.JSArray_methods.set$length(t3, t2);
        if (t1 >>> 0 !== t1 || t1 >= t3.length)
          return H.ioore(t3, t1);
        t3[t1] = 0;
      }
      t1 = this_array.data;
      if (w >= t1.length)
        return H.ioore(t1, w);
      t2 = J.$add$ns(t1[w], n);
      if (w > t1.length - 1)
        C.JSArray_methods.set$length(t1, w + 1);
      t3 = t1.length;
      if (w >= t3)
        return H.ioore(t1, w);
      t1[w] = t2;
      t2 = t3;
      while (true) {
        if (w >= t2)
          return H.ioore(t1, w);
        if (!J.$ge$n(t1[w], $.BigInteger_BI_DV))
          break;
        if (w >= t1.length)
          return H.ioore(t1, w);
        t2 = J.$sub$n(t1[w], $.BigInteger_BI_DV);
        if (w > t1.length - 1)
          C.JSArray_methods.set$length(t1, w + 1);
        t3 = t1.length;
        if (w >= t3)
          return H.ioore(t1, w);
        t1[w] = t2;
        ++w;
        t2 = this.t;
        if (typeof t2 !== "number")
          return H.iae(t2);
        if (w >= t2) {
          t4 = t2 + 1;
          this.t = t4;
          if (t2 > t3 - 1)
            C.JSArray_methods.set$length(t1, t4);
          t3 = t1.length;
          if (t2 >>> 0 !== t2 || t2 >= t3)
            return H.ioore(t1, t2);
          t1[t2] = 0;
          t2 = t3;
        } else
          t2 = t3;
        if (w >= t2)
          return H.ioore(t1, w);
        t2 = J.$add$ns(t1[w], 1);
        if (w > t1.length - 1)
          C.JSArray_methods.set$length(t1, w + 1);
        t3 = t1.length;
        if (w >= t3)
          return H.ioore(t1, w);
        t1[w] = t2;
        t2 = t3;
      }
    },
    $add: function(_, other) {
      return this.add$1(0, other);
    },
    $sub: function(_, other) {
      return this.subtract$1(other);
    },
    $mul: function(_, other) {
      var r = Z.BigInteger$(null, null, null);
      this.multiplyTo$2(other, r);
      return r;
    },
    $mod: function(_, other) {
      var r = Z.BigInteger$(null, null, null);
      this.divRemTo$3(other, null, r);
      return r.signum$0() >= 0 ? r : r.add$1(0, other);
    },
    $tdiv: function(_, other) {
      return this.divide$1(other);
    },
    $negate: function(_) {
      return this.negate_op$0();
    },
    $lt: function(_, other) {
      return J.$lt$n(this.compareTo$1(0, other), 0) && true;
    },
    $le: function(_, other) {
      return J.$le$n(this.compareTo$1(0, other), 0) && true;
    },
    $gt: function(_, other) {
      return J.$gt$n(this.compareTo$1(0, other), 0) && true;
    },
    $ge: function(_, other) {
      return J.$ge$n(this.compareTo$1(0, other), 0) && true;
    },
    $eq: function(_, other) {
      if (other == null)
        return false;
      return J.$eq(this.compareTo$1(0, other), 0) && true;
    },
    $and: function(_, other) {
      var r = Z.BigInteger$(null, null, null);
      this.bitwiseTo$3(other, this.get$op_and(), r);
      return r;
    },
    $or: function(_, other) {
      var r = Z.BigInteger$(null, null, null);
      this.bitwiseTo$3(other, this.get$op_or(), r);
      return r;
    },
    $shl: function(_, shiftAmount) {
      var r, t1;
      r = Z.BigInteger$(null, null, null);
      t1 = J.getInterceptor$n(shiftAmount);
      if (t1.$lt(shiftAmount, 0))
        this.rShiftTo$2(t1.$negate(shiftAmount), r);
      else
        this.lShiftTo$2(shiftAmount, r);
      return r;
    },
    $shr: function(_, shiftAmount) {
      var r, t1;
      r = Z.BigInteger$(null, null, null);
      t1 = J.getInterceptor$n(shiftAmount);
      if (t1.$lt(shiftAmount, 0))
        this.lShiftTo$2(t1.$negate(shiftAmount), r);
      else
        this.rShiftTo$2(shiftAmount, r);
      return r;
    },
    BigInteger$3: function(a, b, c) {
      var t1, t2;
      this._lowprimes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509];
      this.BI_RC = P.LinkedHashMap_LinkedHashMap(null, null, null, null, null);
      this._j_lm = (this.canary & 16777215) === 15715070;
      this._setupDigitConversions$0();
      this._lplim = C.JSInt_methods.$tdiv(67108864, this._lowprimes[96]);
      this.am = this.get$_am3();
      $.BigInteger_dbits = 28;
      $.BigInteger_BI_DB = 28;
      $.BigInteger_BI_DM = 268435455;
      $.BigInteger_BI_DV = 268435456;
      $.BigInteger_BI_FP = 52;
      $.BigInteger_BI_FV = Math.pow(2, 52);
      t1 = $.BigInteger_BI_FP;
      t2 = $.BigInteger_dbits;
      if (typeof t1 !== "number")
        return t1.$sub();
      if (typeof t2 !== "number")
        return H.iae(t2);
      $.BigInteger_BI_F1 = t1 - t2;
      $.BigInteger_BI_F2 = 2 * t2 - t1;
      t1 = J.JSInt;
      this.array = H.setRuntimeTypeInfo(new Z.JSArray(H.setRuntimeTypeInfo([], [t1])), [t1]);
      if (a != null)
        if (typeof a === "number" && Math.floor(a) === a)
          this.fromString$2(C.JSInt_methods.toString$0(a), 10);
        else
          this.fromString$2(C.JSInt_methods.toString$0(C.JSNumber_methods.toInt$0(a)), 10);
    },
    static: {"^": "BigInteger_dbits,BigInteger_BI_DB,BigInteger_BI_DM,BigInteger_BI_DV,BigInteger_BI_FP,BigInteger_BI_FV,BigInteger_BI_F1,BigInteger_BI_F2", BigInteger$: function(a, b, c) {
        var t1 = new Z.BigInteger(null, null, 244837814094590, null, null, null, "0123456789abcdefghijklmnopqrstuvwxyz", null, null, null, true);
        t1.BigInteger$3(a, b, c);
        return t1;
      }}
  }
}],
["dart._internal", "dart:_internal", , H, {
  "^": "",
  IterableMixinWorkaround_forEach: function(iterable, f) {
    var t1;
    for (t1 = new H.ListIterator(iterable, iterable.length, 0, null); t1.moveNext$0();)
      f.call$1(t1._current);
  },
  IterableMixinWorkaround_toStringIterable: function(iterable, leftDelimiter, rightDelimiter) {
    var result, i, t1;
    for (i = 0; t1 = $.get$IterableMixinWorkaround__toStringList(), i < t1.length; ++i)
      if (t1[i] === iterable)
        return H.S(leftDelimiter) + "..." + H.S(rightDelimiter);
    result = P.StringBuffer$("");
    try {
      $.get$IterableMixinWorkaround__toStringList().push(iterable);
      result.write$1(leftDelimiter);
      result.writeAll$2(iterable, ", ");
      result.write$1(rightDelimiter);
    } finally {
      t1 = $.get$IterableMixinWorkaround__toStringList();
      if (0 >= t1.length)
        return H.ioore(t1, 0);
      t1.pop();
    }
    return result.get$_contents();
  },
  ListIterator: {
    "^": "Object;_iterable,_length,_index,_current",
    moveNext$0: function() {
      var t1, $length, t2;
      t1 = this._iterable;
      $length = t1.length;
      if (this._length !== $length)
        throw H.wrapException(P.ConcurrentModificationError$(t1));
      t2 = this._index;
      if (t2 >= $length) {
        this._current = null;
        return false;
      }
      this._current = t1[t2];
      this._index = t2 + 1;
      return true;
    }
  }
}],
["dart.collection", "dart:collection", , P, {
  "^": "",
  _defaultEquals: [function(a, b) {
    return J.$eq(a, b);
  }, "call$2", "_defaultEquals$closure", 4, 0, 0],
  _defaultHashCode: [function(a) {
    return J.get$hashCode$(a);
  }, "call$1", "_defaultHashCode$closure", 2, 0, 1],
  LinkedHashMap_LinkedHashMap: function(equals, hashCode, isValidKey, $K, $V) {
    return H.setRuntimeTypeInfo(new P._LinkedHashMap(0, null, null, null, null, null, 0), [$K, $V]);
  },
  Maps_mapToString: function(m) {
    var t1, result, i, t2;
    t1 = {};
    for (i = 0; t2 = $.get$Maps__toStringList(), i < t2.length; ++i)
      if (t2[i] === m)
        return "{...}";
    result = P.StringBuffer$("");
    try {
      $.get$Maps__toStringList().push(m);
      result.write$1("{");
      t1.first_0 = true;
      J.forEach$1$a(m, new P.Maps_mapToString_closure(t1, result));
      result.write$1("}");
    } finally {
      t1 = $.get$Maps__toStringList();
      if (0 >= t1.length)
        return H.ioore(t1, 0);
      t1.pop();
    }
    return result.get$_contents();
  },
  _LinkedHashMap: {
    "^": "Object;_collection$_length,_strings,_nums,_rest,_first,_last,_modifications",
    get$length: function(_) {
      return this._collection$_length;
    },
    $index: function(_, key) {
      var nums, cell, rest, bucket, index;
      if ((key & 0x3ffffff) === key) {
        nums = this._nums;
        if (nums == null)
          return;
        cell = nums[key];
        return cell == null ? null : cell.get$_value();
      } else {
        rest = this._rest;
        if (rest == null)
          return;
        bucket = rest[this._computeHashCode$1(key)];
        index = this._findBucketIndex$2(bucket, key);
        if (index < 0)
          return;
        return bucket[index].get$_value();
      }
    },
    $indexSet: function(_, key, value) {
      var strings, nums, rest, hash, bucket, index;
      if (typeof key === "string" && key !== "__proto__") {
        strings = this._strings;
        if (strings == null) {
          strings = P._LinkedHashMap__newHashTable();
          this._strings = strings;
        }
        this._addHashTableEntry$3(strings, key, value);
      } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
        nums = this._nums;
        if (nums == null) {
          nums = P._LinkedHashMap__newHashTable();
          this._nums = nums;
        }
        this._addHashTableEntry$3(nums, key, value);
      } else {
        rest = this._rest;
        if (rest == null) {
          rest = P._LinkedHashMap__newHashTable();
          this._rest = rest;
        }
        hash = this._computeHashCode$1(key);
        bucket = rest[hash];
        if (bucket == null)
          rest[hash] = [this._newLinkedCell$2(key, value)];
        else {
          index = this._findBucketIndex$2(bucket, key);
          if (index >= 0)
            bucket[index].set$_value(value);
          else
            bucket.push(this._newLinkedCell$2(key, value));
        }
      }
    },
    forEach$1: function(_, action) {
      var cell, modifications;
      cell = this._first;
      modifications = this._modifications;
      for (; cell != null;) {
        action.call$2(cell._key, cell._value);
        if (modifications !== this._modifications)
          throw H.wrapException(P.ConcurrentModificationError$(this));
        cell = cell._next;
      }
    },
    _addHashTableEntry$3: function(table, key, value) {
      var cell = table[key];
      if (cell == null)
        table[key] = this._newLinkedCell$2(key, value);
      else
        cell.set$_value(value);
    },
    _newLinkedCell$2: function(key, value) {
      var cell, last;
      cell = new P.LinkedHashMapCell(key, value, null, null);
      if (this._first == null) {
        this._last = cell;
        this._first = cell;
      } else {
        last = this._last;
        cell._previous = last;
        last._next = cell;
        this._last = cell;
      }
      this._collection$_length = this._collection$_length + 1;
      this._modifications = this._modifications + 1 & 67108863;
      return cell;
    },
    _computeHashCode$1: function(key) {
      return J.get$hashCode$(key) & 0x3ffffff;
    },
    _findBucketIndex$2: function(bucket, key) {
      var $length, i;
      if (bucket == null)
        return -1;
      $length = bucket.length;
      for (i = 0; i < $length; ++i)
        if (J.$eq(bucket[i].get$_key(), key))
          return i;
      return -1;
    },
    toString$0: function(_) {
      return P.Maps_mapToString(this);
    },
    static: {_LinkedHashMap__newHashTable: function() {
        var table = Object.create(null);
        table["<non-identifier-key>"] = table;
        delete table["<non-identifier-key>"];
        return table;
      }}
  },
  LinkedHashMapCell: {
    "^": "Object;_key<,_value@,_next,_previous"
  },
  Maps_mapToString_closure: {
    "^": "Closure;box_0,result_1",
    call$2: function(k, v) {
      var t1 = this.box_0;
      if (!t1.first_0)
        this.result_1.write$1(", ");
      t1.first_0 = false;
      t1 = this.result_1;
      t1.write$1(k);
      t1.write$1(": ");
      t1.write$1(v);
    }
  }
}],
["dart.core", "dart:core", , P, {
  "^": "",
  Error_safeToString: function(object) {
    return H.Primitives_objectToString(object);
  },
  identical: [function(a, b) {
    return a == null ? b == null : a === b;
  }, "call$2", "identical$closure", 4, 0, 2],
  identityHashCode: [function(object) {
    return H.objectHashCode(object);
  }, "call$1", "identityHashCode$closure", 2, 0, 3],
  print: function(object) {
    H.printString(object);
  },
  Error: {
    "^": "Object;"
  },
  NullThrownError: {
    "^": "Error;",
    toString$0: function(_) {
      return "Throw of null.";
    }
  },
  ArgumentError: {
    "^": "Error;message",
    toString$0: function(_) {
      var t1 = this.message;
      if (t1 != null)
        return "Illegal argument(s): " + H.S(t1);
      return "Illegal argument(s)";
    },
    static: {ArgumentError$: function(message) {
        return new P.ArgumentError(message);
      }}
  },
  RangeError: {
    "^": "ArgumentError;message",
    toString$0: function(_) {
      return "RangeError: " + H.S(this.message);
    },
    static: {RangeError$: function(message) {
        return new P.RangeError(message);
      }, RangeError$value: function(value) {
        return new P.RangeError("value " + H.S(value));
      }}
  },
  UnsupportedError: {
    "^": "Error;message",
    toString$0: function(_) {
      return "Unsupported operation: " + this.message;
    },
    static: {UnsupportedError$: function(message) {
        return new P.UnsupportedError(message);
      }}
  },
  ConcurrentModificationError: {
    "^": "Error;modifiedObject",
    toString$0: function(_) {
      return "Concurrent modification during iteration: " + P.Error_safeToString(this.modifiedObject) + ".";
    },
    static: {ConcurrentModificationError$: function(modifiedObject) {
        return new P.ConcurrentModificationError(modifiedObject);
      }}
  },
  OutOfMemoryError: {
    "^": "Object;",
    toString$0: function(_) {
      return "Out of Memory";
    }
  },
  CyclicInitializationError: {
    "^": "Error;variableName",
    toString$0: function(_) {
      return "Reading static variable '" + this.variableName + "' during its initialization";
    },
    static: {CyclicInitializationError$: function(variableName) {
        return new P.CyclicInitializationError(variableName);
      }}
  },
  Null: {
    "^": "Object;",
    toString$0: function(_) {
      return "null";
    }
  },
  Object: {
    "^": ";",
    $eq: function(_, other) {
      return this === other;
    },
    get$hashCode: function(_) {
      return H.Primitives_objectHashCode(this);
    },
    toString$0: function(_) {
      return H.Primitives_objectToString(this);
    }
  },
  StringBuffer: {
    "^": "Object;_contents<",
    get$length: function(_) {
      return this._contents.length;
    },
    write$1: function(obj) {
      var str = typeof obj === "string" ? obj : H.S(obj);
      this._contents = this._contents + str;
    },
    writeAll$2: function(objects, separator) {
      var iterator, str;
      iterator = new H.ListIterator(objects, objects.length, 0, null);
      if (!iterator.moveNext$0())
        return;
      if (separator.length === 0)
        do {
          str = iterator._current;
          str = typeof str === "string" ? str : H.S(str);
          this._contents = this._contents + str;
        } while (iterator.moveNext$0());
      else {
        this.write$1(iterator._current);
        for (; iterator.moveNext$0();) {
          this._contents = this._contents + separator;
          str = iterator._current;
          str = typeof str === "string" ? str : H.S(str);
          this._contents = this._contents + str;
        }
      }
    },
    toString$0: function(_) {
      return this._contents;
    },
    StringBuffer$1: function($content) {
      this._contents = $content;
    },
    static: {StringBuffer$: function($content) {
        var t1 = new P.StringBuffer("");
        t1.StringBuffer$1($content);
        return t1;
      }}
  }
}],
["dart.math", "dart:math", , P, {
  "^": "",
  min: function(a, b) {
    if (typeof a !== "number")
      throw H.wrapException(P.ArgumentError$(a));
    if (typeof b !== "number")
      throw H.wrapException(P.ArgumentError$(b));
    if (a > b)
      return b;
    if (a < b)
      return a;
    if (typeof b === "number") {
      if (typeof a === "number")
        if (a === 0)
          return (a + b) * a * b;
      if (a === 0 && C.JSNumber_methods.get$isNegative(b) || isNaN(b))
        return b;
      return a;
    }
    return a;
  },
  max: function(a, b) {
    if (a > b)
      return a;
    if (a < b)
      return b;
    if (typeof b === "number") {
      if (typeof a === "number")
        if (a === 0)
          return a + b;
      if (isNaN(b))
        return b;
      return a;
    }
    if (b === 0 && C.JSNumber_methods.get$isNegative(a))
      return b;
    return a;
  }
}],
["dart2js._js_primitives", "dart:_js_primitives", , H, {
  "^": "",
  printString: function(string) {
    if (typeof dartPrint == "function") {
      dartPrint(string);
      return;
    }
    if (typeof console == "object" && typeof console.log == "function") {
      console.log(string);
      return;
    }
    if (typeof window == "object")
      return;
    if (typeof print == "function") {
      print(string);
      return;
    }
    throw "Unable to print message: " + String(string);
  }
}],
["", "simple.dart", , M, {
  "^": "",
  main: function() {
    var e, compareValue, t1, r;
    e = Z.BigInteger$(765495393, null, null);
    compareValue = Z.BigInteger$(Math.pow(2, 32) - 1, null, null).subtract$1(e);
    t1 = "1: " + H.S(e.intValue$0()) + " ";
    r = Z.BigInteger$(null, null, null);
    r.fromInt$1(0);
    t1 = t1 + H.S(e.compareTo$1(0, r)) + " ";
    P.print(t1 + H.S(e.compareTo$1(0, Z.BigInteger$(Math.pow(2, 32), null, null))));
    P.print("2: " + H.S(e.intValue$0()) + " " + H.S(compareValue.intValue$0()) + " " + e.signum$0() + " " + compareValue.signum$0());
  }
},
1],
]);
Isolate.$finishClasses($$, $, null);
$$ = null;

// Runtime type support
// getInterceptor methods
J.getInterceptor = function(receiver) {
  if (typeof receiver == "number") {
    if (Math.floor(receiver) == receiver)
      return J.JSInt.prototype;
    return J.JSDouble.prototype;
  }
  if (typeof receiver == "string")
    return J.JSString.prototype;
  if (receiver == null)
    return J.JSNull.prototype;
  if (typeof receiver == "boolean")
    return J.JSBool.prototype;
  if (receiver.constructor == Array)
    return J.JSArray0.prototype;
  return receiver;
};
J.getInterceptor$a = function(receiver) {
  if (receiver == null)
    return receiver;
  if (receiver.constructor == Array)
    return J.JSArray0.prototype;
  return receiver;
};
J.getInterceptor$as = function(receiver) {
  if (typeof receiver == "string")
    return J.JSString.prototype;
  if (receiver == null)
    return receiver;
  if (receiver.constructor == Array)
    return J.JSArray0.prototype;
  return receiver;
};
J.getInterceptor$n = function(receiver) {
  if (typeof receiver == "number")
    return J.JSNumber.prototype;
  if (receiver == null)
    return receiver;
  return receiver;
};
J.getInterceptor$ns = function(receiver) {
  if (typeof receiver == "number")
    return J.JSNumber.prototype;
  if (typeof receiver == "string")
    return J.JSString.prototype;
  if (receiver == null)
    return receiver;
  return receiver;
};
J.getInterceptor$s = function(receiver) {
  if (typeof receiver == "string")
    return J.JSString.prototype;
  if (receiver == null)
    return receiver;
  return receiver;
};
J.$add$ns = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver + a0;
  return J.getInterceptor$ns(receiver).$add(receiver, a0);
};
J.$and$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return (receiver & a0) >>> 0;
  return J.getInterceptor$n(receiver).$and(receiver, a0);
};
J.$eq = function(receiver, a0) {
  if (receiver == null)
    return a0 == null;
  if (typeof receiver != "object")
    return a0 != null && receiver === a0;
  return J.getInterceptor(receiver).$eq(receiver, a0);
};
J.$ge$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver >= a0;
  return J.getInterceptor$n(receiver).$ge(receiver, a0);
};
J.$gt$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver > a0;
  return J.getInterceptor$n(receiver).$gt(receiver, a0);
};
J.$le$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver <= a0;
  return J.getInterceptor$n(receiver).$le(receiver, a0);
};
J.$lt$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver < a0;
  return J.getInterceptor$n(receiver).$lt(receiver, a0);
};
J.$mul$ns = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver * a0;
  return J.getInterceptor$ns(receiver).$mul(receiver, a0);
};
J.$or$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return (receiver | a0) >>> 0;
  return J.getInterceptor$n(receiver).$or(receiver, a0);
};
J.$shl$n = function(receiver, a0) {
  return J.getInterceptor$n(receiver).$shl(receiver, a0);
};
J.$shr$n = function(receiver, a0) {
  return J.getInterceptor$n(receiver).$shr(receiver, a0);
};
J.$sub$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver - a0;
  return J.getInterceptor$n(receiver).$sub(receiver, a0);
};
J.abs$0$n = function(receiver) {
  return J.getInterceptor$n(receiver).abs$0(receiver);
};
J.floor$0$n = function(receiver) {
  return J.getInterceptor$n(receiver).floor$0(receiver);
};
J.forEach$1$a = function(receiver, a0) {
  return J.getInterceptor$a(receiver).forEach$1(receiver, a0);
};
J.get$hashCode$ = function(receiver) {
  return J.getInterceptor(receiver).get$hashCode(receiver);
};
J.get$length$as = function(receiver) {
  return J.getInterceptor$as(receiver).get$length(receiver);
};
J.toInt$0$n = function(receiver) {
  return J.getInterceptor$n(receiver).toInt$0(receiver);
};
J.toRadixString$1$n = function(receiver, a0) {
  return J.getInterceptor$n(receiver).toRadixString$1(receiver, a0);
};
J.toString$0 = function(receiver) {
  return J.getInterceptor(receiver).toString$0(receiver);
};
C.C_OutOfMemoryError = new P.OutOfMemoryError();
C.JSArray_methods = J.JSArray0.prototype;
C.JSInt_methods = J.JSInt.prototype;
C.JSNumber_methods = J.JSNumber.prototype;
C.JSString_methods = J.JSString.prototype;
C.JS_CONST_IX5 = function getTagFallback(o) {
  var constructor = o.constructor;
  if (typeof constructor == "function") {
    var name = constructor.name;
    if (typeof name == "string"
        && name !== ""
        && name !== "Object"
        && name !== "Function.prototype") {
      return name;
    }
  }
  var s = Object.prototype.toString.call(o);
  return s.substring(8, s.length - 1);
};
$.libraries_to_load = {};
$.Closure_functionCounter = 0;
$.BoundClosure_selfFieldNameCache = null;
$.BoundClosure_receiverFieldNameCache = null;
$.BigInteger_dbits = null;
$.BigInteger_BI_DB = null;
$.BigInteger_BI_DM = null;
$.BigInteger_BI_DV = null;
$.BigInteger_BI_FP = null;
$.BigInteger_BI_FV = null;
$.BigInteger_BI_F1 = null;
$.BigInteger_BI_F2 = null;
$.printToZone = null;
Isolate.$lazy($, "_toStringList", "IterableMixinWorkaround__toStringList", "get$IterableMixinWorkaround__toStringList", function() {
  return [];
});
Isolate.$lazy($, "_toStringList", "Maps__toStringList", "get$Maps__toStringList", function() {
  return [];
});

init.functionAliases = {};
;
init.metadata = [{func: "bool__dynamic_dynamic", ret: J.JSBool, args: [null, null]},
{func: "int__dynamic", ret: J.JSInt, args: [null]},
{func: "bool__Object_Object", ret: J.JSBool, args: [P.Object, P.Object]},
{func: "int__Object", ret: J.JSInt, args: [P.Object]},
{func: "args6", args: [null, null, null, null, null, null]},
{func: "args2", args: [null, null]},
];
$ = null;
Isolate = Isolate.$finishIsolateConstructor(Isolate);
$ = new Isolate();
function convertToFastObject(properties) {
  function MyClass() {};
  MyClass.prototype = properties;
  new MyClass();
  return properties;
}
A = convertToFastObject(A);
B = convertToFastObject(B);
C = convertToFastObject(C);
D = convertToFastObject(D);
E = convertToFastObject(E);
F = convertToFastObject(F);
G = convertToFastObject(G);
H = convertToFastObject(H);
J = convertToFastObject(J);
K = convertToFastObject(K);
L = convertToFastObject(L);
M = convertToFastObject(M);
N = convertToFastObject(N);
O = convertToFastObject(O);
P = convertToFastObject(P);
Q = convertToFastObject(Q);
R = convertToFastObject(R);
S = convertToFastObject(S);
T = convertToFastObject(T);
U = convertToFastObject(U);
V = convertToFastObject(V);
W = convertToFastObject(W);
X = convertToFastObject(X);
Y = convertToFastObject(Y);
Z = convertToFastObject(Z);
// BEGIN invoke [main].
;(function (callback) {
  if (typeof document === "undefined") {
    callback(null);
    return;
  }
  if (document.currentScript) {
    callback(document.currentScript);
    return;
  }

  var scripts = document.scripts;
  function onLoad(event) {
    for (var i = 0; i < scripts.length; ++i) {
      scripts[i].removeEventListener("load", onLoad, false);
    }
    callback(event.target);
  }
  for (var i = 0; i < scripts.length; ++i) {
    scripts[i].addEventListener("load", onLoad, false);
  }
})(function(currentScript) {
  init.currentScript = currentScript;

  if (typeof dartMainRunner === "function") {
    dartMainRunner(M.main, []);
  } else {
    M.main([]);
  }
});
// END invoke [main].
function init() {
  Isolate.$isolateProperties = {};
  function generateAccessor(fieldDescriptor, accessors, cls) {
    var fieldInformation = fieldDescriptor.split("-");
    var field = fieldInformation[0];
    var len = field.length;
    var code = field.charCodeAt(len - 1);
    var reflectable;
    if (fieldInformation.length > 1)
      reflectable = true;
    else
      reflectable = false;
    code = code >= 60 && code <= 64 ? code - 59 : code >= 123 && code <= 126 ? code - 117 : code >= 37 && code <= 43 ? code - 27 : 0;
    if (code) {
      var getterCode = code & 3;
      var setterCode = code >> 2;
      var accessorName = field = field.substring(0, len - 1);
      var divider = field.indexOf(":");
      if (divider > 0) {
        accessorName = field.substring(0, divider);
        field = field.substring(divider + 1);
      }
      if (getterCode) {
        var args = getterCode & 2 ? "receiver" : "";
        var receiver = getterCode & 1 ? "this" : "receiver";
        var body = "return " + receiver + "." + field;
        var property = cls + ".prototype.get$" + accessorName + "=";
        var fn = "function(" + args + "){" + body + "}";
        if (reflectable)
          accessors.push(property + "$reflectable(" + fn + ");\n");
        else
          accessors.push(property + fn + ";\n");
      }
      if (setterCode) {
        var args = setterCode & 2 ? "receiver, value" : "value";
        var receiver = setterCode & 1 ? "this" : "receiver";
        var body = receiver + "." + field + " = value";
        var property = cls + ".prototype.set$" + accessorName + "=";
        var fn = "function(" + args + "){" + body + "}";
        if (reflectable)
          accessors.push(property + "$reflectable(" + fn + ");\n");
        else
          accessors.push(property + fn + ";\n");
      }
    }
    return field;
  }
  Isolate.$isolateProperties.$generateAccessor = generateAccessor;
  function defineClass(name, cls, fields) {
    var accessors = [];
    var str = "function " + cls + "(";
    var body = "";
    for (var i = 0; i < fields.length; i++) {
      if (i != 0)
        str += ", ";
      var field = generateAccessor(fields[i], accessors, cls);
      var parameter = "parameter_" + field;
      str += parameter;
      body += "this." + field + " = " + parameter + ";\n";
    }
    str += ") {\n" + body + "}\n";
    str += cls + ".builtin$cls=\"" + name + "\";\n";
    str += "$desc=$collectedClasses." + cls + ";\n";
    str += "if($desc instanceof Array) $desc = $desc[1];\n";
    str += cls + ".prototype = $desc;\n";
    if (typeof defineClass.name != "string") {
      str += cls + ".name=\"" + cls + "\";\n";
    }
    str += accessors.join("");
    return str;
  }
  var inheritFrom = function() {
    function tmp() {
    }
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    return function(constructor, superConstructor) {
      tmp.prototype = superConstructor.prototype;
      var object = new tmp();
      var properties = constructor.prototype;
      for (var member in properties)
        if (hasOwnProperty.call(properties, member))
          object[member] = properties[member];
      object.constructor = constructor;
      constructor.prototype = object;
      return object;
    };
  }();
  Isolate.$finishClasses = function(collectedClasses, isolateProperties, existingIsolateProperties) {
    var pendingClasses = {};
    if (!init.allClasses)
      init.allClasses = {};
    var allClasses = init.allClasses;
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    if (typeof dart_precompiled == "function") {
      var constructors = dart_precompiled(collectedClasses);
    } else {
      var combinedConstructorFunction = "function $reflectable(fn){fn.$reflectable=1;return fn};\n" + "var $desc;\n";
      var constructorsList = [];
    }
    for (var cls in collectedClasses) {
      if (hasOwnProperty.call(collectedClasses, cls)) {
        var desc = collectedClasses[cls];
        if (desc instanceof Array)
          desc = desc[1];
        var classData = desc["^"], supr, name = cls, fields = classData;
        if (typeof classData == "string") {
          var split = classData.split("/");
          if (split.length == 2) {
            name = split[0];
            fields = split[1];
          }
        }
        var s = fields.split(";");
        fields = s[1] == "" ? [] : s[1].split(",");
        supr = s[0];
        split = supr.split(":");
        if (split.length == 2) {
          supr = split[0];
          var functionSignature = split[1];
          if (functionSignature)
            desc.$signature = function(s) {
              return function() {
                return init.metadata[s];
              };
            }(functionSignature);
        }
        if (typeof dart_precompiled != "function") {
          combinedConstructorFunction += defineClass(name, cls, fields);
          constructorsList.push(cls);
        }
        if (supr)
          pendingClasses[cls] = supr;
      }
    }
    if (typeof dart_precompiled != "function") {
      combinedConstructorFunction += "return [\n  " + constructorsList.join(",\n  ") + "\n]";
      var constructors = new Function("$collectedClasses", combinedConstructorFunction)(collectedClasses);
      combinedConstructorFunction = null;
    }
    for (var i = 0; i < constructors.length; i++) {
      var constructor = constructors[i];
      var cls = constructor.name;
      var desc = collectedClasses[cls];
      var globalObject = isolateProperties;
      if (desc instanceof Array) {
        globalObject = desc[0] || isolateProperties;
        desc = desc[1];
      }
      allClasses[cls] = constructor;
      globalObject[cls] = constructor;
    }
    constructors = null;
    var finishedClasses = {};
    init.interceptorsByTag = Object.create(null);
    init.leafTags = {};
    function finishClass(cls) {
      var hasOwnProperty = Object.prototype.hasOwnProperty;
      if (hasOwnProperty.call(finishedClasses, cls))
        return;
      finishedClasses[cls] = true;
      var superclass = pendingClasses[cls];
      if (!superclass || typeof superclass != "string")
        return;
      finishClass(superclass);
      var constructor = allClasses[cls];
      var superConstructor = allClasses[superclass];
      if (!superConstructor)
        superConstructor = existingIsolateProperties[superclass];
      var prototype = inheritFrom(constructor, superConstructor);
    }
    for (var cls in pendingClasses)
      finishClass(cls);
  };
  Isolate.$lazy = function(prototype, staticName, fieldName, getterName, lazyValue) {
    var sentinelUndefined = {};
    var sentinelInProgress = {};
    prototype[fieldName] = sentinelUndefined;
    prototype[getterName] = function() {
      var result = $[fieldName];
      try {
        if (result === sentinelUndefined) {
          $[fieldName] = sentinelInProgress;
          try {
            result = $[fieldName] = lazyValue();
          } finally {
            if (result === sentinelUndefined) {
              if ($[fieldName] === sentinelInProgress) {
                $[fieldName] = null;
              }
            }
          }
        } else {
          if (result === sentinelInProgress)
            H.throwCyclicInit(staticName);
        }
        return result;
      } finally {
        $[getterName] = function() {
          return this[fieldName];
        };
      }
    };
  };
  Isolate.$finishIsolateConstructor = function(oldIsolate) {
    var isolateProperties = oldIsolate.$isolateProperties;
    function Isolate() {
      var hasOwnProperty = Object.prototype.hasOwnProperty;
      for (var staticName in isolateProperties)
        if (hasOwnProperty.call(isolateProperties, staticName))
          this[staticName] = isolateProperties[staticName];
      function ForceEfficientMap() {
      }
      ForceEfficientMap.prototype = this;
      new ForceEfficientMap();
    }
    Isolate.prototype = oldIsolate.prototype;
    Isolate.prototype.constructor = Isolate;
    Isolate.$isolateProperties = isolateProperties;
    Isolate.$finishClasses = oldIsolate.$finishClasses;
    return Isolate;
  };
}
})()

//# sourceMappingURL=simple.dart.js.map
//@ sourceMappingURL=simple.dart.js.map
